{
  "packages/bleh-ui-icons/README.mdx": {
    "meta": {
      "id": "Icons",
      "title": "Icons",
      "description": "display Icons",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui-icons/README.mdx",
      "menu": [
        "Components",
        "Media",
        "Icons"
      ],
      "route": "components/media/icons",
      "tags": [
        "icons"
      ],
      "toc": []
    },
    "mdx": "\n# Icons\n\nIcons come from a separate package. Each Icon is a react component that can be\nused in any other component.\n\nThis is the list of available icons:\n\n<IconSearch />\n"
  },
  "packages/bleh-ui/node_modules/@bleh-ui/icons/README.mdx": {
    "meta": {
      "id": "Icons",
      "title": "Icons",
      "description": "display Icons",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/node_modules/@bleh-ui/icons/README.mdx",
      "menu": [
        "Components",
        "Media",
        "Icons"
      ],
      "route": "components/media/icons",
      "tags": [
        "icons"
      ],
      "toc": []
    },
    "mdx": "\n# Icons\n\nIcons come from a separate package. Each Icon is a react component that can be\nused in any other component.\n\nThis is the list of available icons:\n\n<IconSearch />\n"
  },
  "packages/bleh-ui/src/components/box/box.mdx": {
    "meta": {
      "id": "Box",
      "title": "Box",
      "description": "the Box component is the lowest level component",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/src/components/box/box.mdx",
      "menu": [
        "Components",
        "Layout",
        "Box"
      ],
      "route": "components/layout/box",
      "tags": [
        "box",
        "layout",
        "container",
        "div",
        "low level"
      ],
      "toc": []
    },
    "mdx": "\n# Box\n\nAdd description.\n"
  },
  "packages/bleh-ui/src/components/button/button.mdx": {
    "meta": {
      "id": "Forms-Button",
      "title": "Button",
      "description": "Displays a Button.",
      "documentState": "ReviewedInternal",
      "documentAudiences": [],
      "order": 999,
      "repoPath": "packages/bleh-ui/src/components/button/button.mdx",
      "menu": [
        "Components",
        "Inputs",
        "Button"
      ],
      "route": "components/inputs/button",
      "tags": [
        "document"
      ],
      "toc": [
        {
          "value": "Basic Usage",
          "href": "#basic-usage",
          "depth": 2,
          "numbering": [
            1,
            1
          ],
          "parent": "root"
        },
        {
          "value": "Events",
          "href": "#events",
          "depth": 2,
          "numbering": [
            1,
            2
          ],
          "parent": "root"
        },
        {
          "value": "Custom DOM-element",
          "href": "#custom-dom-element",
          "depth": 2,
          "numbering": [
            1,
            3
          ],
          "parent": "root"
        },
        {
          "value": "Aria- & Data-Attributes",
          "href": "#aria---data-attributes",
          "depth": 2,
          "numbering": [
            1,
            4
          ],
          "parent": "root"
        },
        {
          "value": "Customizing the look",
          "href": "#customizing-the-look",
          "depth": 2,
          "numbering": [
            1,
            5
          ],
          "parent": "root"
        },
        {
          "value": "Sizes",
          "href": "#sizes",
          "depth": 3,
          "numbering": [
            1,
            5,
            1
          ],
          "parent": "root"
        },
        {
          "value": "Variants",
          "href": "#variants",
          "depth": 3,
          "numbering": [
            1,
            5,
            2
          ],
          "parent": "root"
        },
        {
          "value": "Tones / Colors",
          "href": "#tones--colors",
          "depth": 3,
          "numbering": [
            1,
            5,
            3
          ],
          "parent": "root"
        },
        {
          "value": "Icons",
          "href": "#icons",
          "depth": 3,
          "numbering": [
            1,
            5,
            4
          ],
          "parent": "root"
        },
        {
          "value": "Properties / API",
          "href": "#properties--api",
          "depth": 2,
          "numbering": [
            1,
            6
          ],
          "parent": "root"
        }
      ],
      "figmaLink": "https://www.figma.com/design/AvtPX6g7OGGCRvNlatGOIY/New-Design-System?node-id=58-132&m=dev"
    },
    "mdx": "\n# Button\n\nDisplays a Button.\n\n## Basic Usage\n\nIf unconfigured it will default to a neutral state. It is important to configure\nthe Button properly to ensure it displays as intended.\n\n```jsx-live\nconst App = () => <Button>I am a Button</Button>\n```\n\n## Events\n\nTo handle the differences between mouse-, touch- and keyboard-interactions, the\n`Button` supports `onPress*` events. The misc `onPress*` events (`onPress`,\n`onPressStart`, `onPressEnd`, etc.) provide a more seamless and inclusive user\nexperience across different devices and input methods:\n\n```jsx-live\nconst App = () => <Button tone=\"primary\" variant=\"solid\" onPress={()=>alert()}>I am accessible</Button>\n```\n\n## Custom DOM-element\n\nThe Button component uses the native\n[HTML button element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button)\nby default, but supports rendering as a different tag to the DOM. Use the\n`asChild` property and the tag you want to render as _only_ child.\n\n```jsx-live\nconst App = () => (\n  <Button tone=\"primary\" variant=\"solid\" asChild>\n    <a href=\"http://www.commercetools.com\" target=\"_blank\">I am a button in disguise</a>\n  </Button>\n)\n```\n\n## Aria- & Data-Attributes\n\nThe Button component supports forwarding `data-*` and `aria-*` attributes. This\ncan be useful for tracking tools & a11y.\n\n```jsx-live\nconst App = () => <Button tone=\"primary\" variant=\"solid\" data-foo=\"bar\">I can have data-attributes</Button>\n```\n\n## Customizing the look\n\n### Sizes\n\nButtons come in different sizes, sizing a button is done by setting the `size`\nprop. Setting the size has no effect on the variant or color of the Button.\n\n```jsx-live\nconst App = () => {\n\n  const sizes = ['2xs', 'xs', 'md'].reverse();\n\n  return (\n    <Stack direction=\"horizontal\" alignItems=\"center\">\n      {sizes.map(size => (\n        <Button tone=\"primary\" variant=\"solid\" key={size} size={size}>'{size}' Button</Button>\n      ))}\n    </Stack>\n  )\n}\n```\n\n### Variants\n\nLook how the buttons change their appearance but not their size. It is important\nthat the variant has no effect on the size. Only then it can be guaranteed that\nbuttons with different variants can be used and displayed next to each other.\n\n```jsx-live\nconst App = () => {\n\n  const variants = ['solid', 'outline', 'ghost', \"link\"]\n\n  return (\n    <Stack direction=\"horizontal\">\n      {variants.map(variant => (\n        <Button tone=\"primary\" key={variant} variant={variant}>'{variant}' Button</Button>\n      ))}\n    </Stack>\n  )\n}\n```\n\n### Tones / Colors\n\nSince the different `variants` operate purely on contrast level differences\n(think: dark & light elements), the `colorPalette` prop can be used to colorize\nthe Button.\n\n```jsx-live\nconst App = () => {\n  const variants = [\"solid\", \"outline\", \"ghost\", \"link\"];\n  const colors = [\"primary\", \"critical\"];\n\n  return (\n    <Stack>\n      {colors.map((color) => (\n        <Stack key={color} direction=\"horizontal\">\n          {variants.map((variant) => (\n            <Button tone={color} key={variant} variant={variant}>\n              '{variant}' Button\n            </Button>\n          ))}\n        </Stack>\n      ))}\n    </Stack>\n  );\n};\n```\n\n### Icons\n\nThe `Button` has a `startIcon` and `endIcon` prop to add icons:\n\n```jsx-live\nconst App = () => {\n  const sizes = [\"2xs\", \"xs\", \"md\"].reverse();\n\n  return (\n    <Stack>\n      {sizes.map((size) => (\n        <Stack key={size} direction=\"horizontal\">\n          <Button size={size} colorPalette=\"success\" variant=\"solid\" startIcon={<Icons.Check />}>\n             Yes\n          </Button>\n          <Button size={size} colorPalette=\"error\" variant=\"solid\" startIcon={<Icons.X />}>\n             No\n          </Button>\n          <Button size={size} colorPalette=\"neutral\" variant=\"ghost\" endIcon={<Box animation=\"spin\" asChild><Icons.Loader/></Box>}>\n             Maybe\n          </Button>\n        </Stack>\n      ))}\n    </Stack>\n  );\n};\n```\n\n## Properties / API\n\n<PropTable id=\"Button\" />\n"
  },
  "packages/bleh-ui/src/components/code/code.mdx": {
    "meta": {
      "id": "Code",
      "title": "Code",
      "description": "renders code blocks",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/src/components/code/code.mdx",
      "menu": [
        "Components",
        "Typography",
        "Code"
      ],
      "route": "components/typography/code",
      "tags": [
        "code"
      ],
      "toc": []
    },
    "mdx": "\n# Code\n\nAdd description later.\n"
  },
  "packages/bleh-ui/src/components/dialog/dialog.mdx": {
    "meta": {
      "id": "Dialog",
      "title": "Dialog",
      "description": "displays a dialog",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/src/components/dialog/dialog.mdx",
      "menu": [
        "Components",
        "Feedback",
        "Dialog"
      ],
      "route": "components/feedback/dialog",
      "tags": [
        "dialog",
        "modal"
      ],
      "toc": [
        {
          "value": "Props",
          "href": "#props",
          "depth": 2,
          "numbering": [
            1,
            1
          ],
          "parent": "root"
        }
      ]
    },
    "mdx": "\n# Dialog\n\n## Props\n\n<PropTables ids=\"DialogRoot, DialogFooter, DialogHeader, DialogBody, DialogBackdrop, DialogTitle, DialogDescription, DialogTrigger, DialogActionTrigger\" />\n"
  },
  "packages/bleh-ui/src/components/em/em.mdx": {
    "meta": {
      "id": "Em",
      "title": "Em",
      "description": "renders em tags",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/src/components/em/em.mdx",
      "menu": [
        "Components",
        "Typography",
        "Em"
      ],
      "route": "components/typography/em",
      "tags": [
        "em"
      ],
      "toc": []
    },
    "mdx": "\n# Em\n\nAdd description later.\n"
  },
  "packages/bleh-ui/src/components/flex/flex.mdx": {
    "meta": {
      "id": "Flex",
      "title": "Flex",
      "description": "the Flex component is used to create layouts based on css display flex",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/src/components/flex/flex.mdx",
      "menu": [
        "Components",
        "Layout",
        "Flex"
      ],
      "route": "components/layout/flex",
      "tags": [
        "flex",
        "flexbox",
        "layout",
        "container",
        "div",
        "low level"
      ],
      "toc": [
        {
          "value": "Usage",
          "href": "#usage",
          "depth": 2,
          "numbering": [
            1,
            1
          ],
          "parent": "root"
        },
        {
          "value": "Second Subheading",
          "href": "#second-subheading",
          "depth": 2,
          "numbering": [
            1,
            2
          ],
          "parent": "root"
        }
      ]
    },
    "mdx": "\n# Flex\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam nec purus nec\nnunc tincidunt tincidunt. Nullam nec pur\n\n## Usage\n\n```jsx\nimport { Flex } from \"@bleh-ui/react\";\n\nconst Component = () => (\n  <Flex>\n    <p>Content</p>\n  </Flex>\n);\n```\n\n## Second Subheading\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam nec purus nec\nnunc tincidunt tincidunt. Nullam nec pur\n"
  },
  "packages/bleh-ui/src/components/heading/heading.mdx": {
    "meta": {
      "id": "Heading",
      "title": "Heading",
      "description": "renders a heading",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/src/components/heading/heading.mdx",
      "menu": [
        "Components",
        "Typography",
        "Heading"
      ],
      "route": "components/typography/heading",
      "tags": [
        "heading"
      ],
      "toc": []
    },
    "mdx": "\n# Heading\n\nAdd description later.\n"
  },
  "packages/bleh-ui/src/components/highlight/highlight.mdx": {
    "meta": {
      "id": "Highlight",
      "title": "Highlight",
      "description": "highlights a substring in a string",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/src/components/highlight/highlight.mdx",
      "menu": [
        "Components",
        "Typography",
        "Highlight"
      ],
      "route": "components/typography/highlight",
      "tags": [
        "highlight",
        "mark"
      ],
      "toc": []
    },
    "mdx": "\n# Highlight\n\nAdd description later.rr\n"
  },
  "packages/bleh-ui/src/components/input-group/input-group.mdx": {
    "meta": {
      "id": "InputGroup",
      "title": "InputGroup",
      "description": "displays an InputGroup",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/src/components/input-group/input-group.mdx",
      "menu": [
        "Components",
        "Inputs",
        "InputGroup"
      ],
      "route": "components/inputs/inputgroup",
      "tags": [
        "input",
        "grouping"
      ],
      "toc": []
    },
    "mdx": "\n# InputGroup\n\nadd description here.\n\n<PropTable id=\"InputGroup\" />\n"
  },
  "packages/bleh-ui/src/components/input/input.mdx": {
    "meta": {
      "id": "Input",
      "title": "Input",
      "description": "displays a Input field",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/src/components/input/input.mdx",
      "menu": [
        "Components",
        "Inputs",
        "Input"
      ],
      "route": "components/inputs/input",
      "tags": [
        "text",
        "input"
      ],
      "toc": []
    },
    "mdx": "\n# Input\n\nadd description here.\n\n<PropTable id=\"Input\" />\n"
  },
  "packages/bleh-ui/src/components/kbd/kbd.mdx": {
    "meta": {
      "id": "Kbd",
      "title": "Kbd",
      "description": "marks a string as keyboard input",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/src/components/kbd/kbd.mdx",
      "menu": [
        "Components",
        "Typography",
        "Kbd"
      ],
      "route": "components/typography/kbd",
      "tags": [
        "keyboard",
        "key"
      ],
      "toc": []
    },
    "mdx": "\n# Kbd\n\nAdd description later.\n"
  },
  "packages/bleh-ui/src/components/link/link.mdx": {
    "meta": {
      "id": "Link",
      "title": "Link",
      "description": "displays a link",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/src/components/link/link.mdx",
      "menu": [
        "Components",
        "Typography",
        "Link"
      ],
      "route": "components/typography/link",
      "tags": [
        "link"
      ],
      "toc": []
    },
    "mdx": "\n# Link\n\nAdd description later.\n"
  },
  "packages/bleh-ui/src/components/list/list.mdx": {
    "meta": {
      "id": "List",
      "title": "List",
      "description": "displays a list",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/src/components/list/list.mdx",
      "menu": [
        "Components",
        "Typography",
        "List"
      ],
      "route": "components/typography/list",
      "tags": [
        "list",
        "collections"
      ],
      "toc": []
    },
    "mdx": "\n# List\n\nAdd description later.\n"
  },
  "packages/bleh-ui/src/components/simple-grid/simple-grid.mdx": {
    "meta": {
      "id": "SimpleGrid",
      "title": "SimpleGrid",
      "description": "displays a simple grid / matrix",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/src/components/simple-grid/simple-grid.mdx",
      "menu": [
        "Components",
        "Layout",
        "SimpleGrid"
      ],
      "route": "components/layout/simplegrid",
      "tags": [
        "grid",
        "simple"
      ],
      "toc": []
    },
    "mdx": "\n# SimpleGrid\n\nAdd description later.\n\n<PropTable id=\"SimpleGrid\" />\n"
  },
  "packages/bleh-ui/src/components/stack/stack.mdx": {
    "meta": {
      "id": "Stack",
      "title": "Stack",
      "description": "displays a Stack",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/src/components/stack/stack.mdx",
      "menu": [
        "Components",
        "Layout",
        "Stack"
      ],
      "route": "components/layout/stack",
      "tags": [
        "stack"
      ],
      "toc": []
    },
    "mdx": "\n# Stack\n\nAdd description later.\n"
  },
  "packages/bleh-ui/src/components/table/table.mdx": {
    "meta": {
      "id": "Table",
      "title": "Table",
      "description": "displays a table",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/src/components/table/table.mdx",
      "menu": [
        "Components",
        "Data Display",
        "Table"
      ],
      "route": "components/data-display/table",
      "tags": [
        "table",
        "tabular data"
      ],
      "toc": [
        {
          "value": "Props",
          "href": "#props",
          "depth": 2,
          "numbering": [
            1,
            1
          ],
          "parent": "root"
        }
      ]
    },
    "mdx": "\n# Table\n\n## Props\n\nRender the PropTable with a `<PropTable id=\"TableRoot\"/>` tag or - if multiple\ncomponents - `<PropTables id=\"TableRoot, TableHeader\"/>`.\n\n<PropTables ids=\"TableRoot, TableHeader, TableColumnHeader, TableRow, TableBody, TableCell, TableFooter\" />\n"
  },
  "packages/bleh-ui/src/components/text/text.mdx": {
    "meta": {
      "id": "Text",
      "title": "Text",
      "description": "the Text component is used to display text",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/src/components/text/text.mdx",
      "menu": [
        "Components",
        "Typography",
        "Text"
      ],
      "route": "components/typography/text",
      "tags": [
        "text",
        "typography"
      ],
      "toc": [
        {
          "value": "Usage",
          "href": "#usage",
          "depth": 2,
          "numbering": [
            1,
            1
          ],
          "parent": "root"
        },
        {
          "value": "Sizes",
          "href": "#sizes",
          "depth": 2,
          "numbering": [
            1,
            2
          ],
          "parent": "root"
        },
        {
          "value": "Weights",
          "href": "#weights",
          "depth": 2,
          "numbering": [
            1,
            3
          ],
          "parent": "root"
        },
        {
          "value": "Truncation",
          "href": "#truncation",
          "depth": 2,
          "numbering": [
            1,
            4
          ],
          "parent": "root"
        },
        {
          "value": "Line Clamp",
          "href": "#line-clamp",
          "depth": 2,
          "numbering": [
            1,
            5
          ],
          "parent": "root"
        },
        {
          "value": "Colors",
          "href": "#colors",
          "depth": 2,
          "numbering": [
            1,
            6
          ],
          "parent": "root"
        }
      ]
    },
    "mdx": "\n# Text\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam nec purus nec\nnunc tincidunt tincidunt. Nullam nec pur.\n\n## Usage\n\n```jsx-live\nimport { Text } from \"@bleh-ui/react\";\n\nconst App = () => <Text>Display Text</Text>;\n```\n\n## Sizes\n\nYou can size text with two properties: `fontSize` and `textStyle`. Use\n`fontSize` to only set the size of the text. Use `textStyle` to set the size and\nan appropriate `line-height` for that size.\n\n```jsx-live\nconst App = () => (\n  <Flex flexDirection=\"column\">\n    {[\"xs\", \"sm\", \"md\", \"lg\", \"xl\", \"2xl\", \"3xl\", \"4xl\",\"5xl\",\"6xl\",\"7xl\"].map((size) => (\n      <Text key={size} asChild textStyle={size}>\n        <span>Displays text in `{size}` size</span>\n      </Text>\n    ))}\n  </Flex>\n)\n```\n\n## Weights\n\nUse the `fontWeight` prop to change the weight of the text:\n\n```jsx-live\nimport { Stack, Text } from \"@bleh-ui/react\"\n\nconst App = () => {\n  return (\n    <Stack>\n      <Text fontWeight=\"100\">Franz jagt im komplett verwahrlosten Taxi quer durch Bayern</Text>\n      <Text fontWeight=\"200\">Franz jagt im komplett verwahrlosten Taxi quer durch Bayern</Text>\n      <Text fontWeight=\"300\">Franz jagt im komplett verwahrlosten Taxi quer durch Bayern</Text>\n      <Text fontWeight=\"400\">Franz jagt im komplett verwahrlosten Taxi quer durch Bayern</Text>\n      <Text fontWeight=\"500\">Franz jagt im komplett verwahrlosten Taxi quer durch Bayern</Text>\n      <Text fontWeight=\"600\">Franz jagt im komplett verwahrlosten Taxi quer durch Bayern</Text>\n      <Text fontWeight=\"700\">Franz jagt im komplett verwahrlosten Taxi quer durch Bayern</Text>\n      <Text fontWeight=\"800\">Franz jagt im komplett verwahrlosten Taxi quer durch Bayern</Text>\n      <Text fontWeight=\"900\">Franz jagt im komplett verwahrlosten Taxi quer durch Bayern</Text>\n    </Stack>\n  )\n}\n```\n\n## Truncation\n\nUse the `truncate` prop to truncate the text after a single line.\n\n```jsx-live\nimport { Flex, Text } from \"@bleh-ui/react\"\n\nconst App = () => (\n    <Flex maxW=\"300px\">\n      <Text truncate>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n      </Text>\n    </Flex>\n  )\n```\n\n## Line Clamp\n\nUse the `lineClamp` prop to truncate the text after a certain number of lines.\n\n```jsx-live\nimport { Flex, Text } from \"@bleh-ui/react\"\n\nconst App = () => (\n    <Flex maxW=\"300px\">\n      <Text lineClamp=\"2\">\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod\n        tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim\n        veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea\n        commodo consequat.\n      </Text>\n    </Flex>\n  )\n```\n\n## Colors\n\nUse the `color` prop to change the color of the text.\n\n```jsx-live\nimport { Stack, Text } from \"@bleh-ui/react\"\n\nconst App = () => (\n    <Stack>\n      <Text color=\"primary.11\">Franz jagt im komplett verwahrlosten Taxi quer durch Bayern</Text>\n      <Text color=\"info.11\">Franz jagt im komplett verwahrlosten Taxi quer durch Bayern</Text>\n      <Text color=\"success.11\">Franz jagt im komplett verwahrlosten Taxi quer durch Bayern</Text>\n      <Text color=\"danger.11\">Franz jagt im komplett verwahrlosten Taxi quer durch Bayern</Text>\n      <Text color=\"error.11\">Franz jagt im komplett verwahrlosten Taxi quer durch Bayern</Text>\n    </Stack>\n  )\n```\n"
  },
  "packages/bleh-ui/src/components/ui-kit-provider/ui-kit-provider.mdx": {
    "meta": {
      "id": "UiKitProvider",
      "title": "UiKitProvider",
      "description": "provides an environment for the rest of the components to work in",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/src/components/ui-kit-provider/ui-kit-provider.mdx",
      "menu": [
        "Components",
        "Utilities",
        "UiKitProvider"
      ],
      "route": "components/utilities/uikitprovider",
      "tags": [
        "system",
        "required",
        "setup"
      ],
      "toc": []
    },
    "mdx": "\n# UiKitProvider\n\nProvides the necesseary context for the rest of the components to work in.\n\n<PropTable id=\"UiKitProvider\" />\n"
  },
  "packages/bleh-ui/src/docs/accessibility.mdx": {
    "meta": {
      "id": "Components-Accessibility",
      "title": "Accessibility",
      "description": "Components designed to enhance accessibility and ARIA compliance.",
      "documentState": "InitialDraft",
      "order": 11,
      "repoPath": "packages/bleh-ui/src/docs/accessibility.mdx",
      "menu": [
        "Components",
        "Accessibility"
      ],
      "route": "components/accessibility",
      "tags": [
        "document"
      ],
      "toc": [],
      "icon": "Accessibility"
    },
    "mdx": "\n# Accessibility\n\nComponents designed to enhance accessibility and ARIA compliance.\n\n- **Screen Reader Aids**: e.g., VisuallyHidden, AccessibleLabel.\n- **Keyboard Navigation**: e.g., FocusTrap, SkipLink.\n- **ARIA Enhancers**: e.g., AriaLiveRegion.\n"
  },
  "packages/bleh-ui/src/docs/background.mdx": {
    "meta": {
      "id": "Style Props-Background",
      "title": "Background",
      "description": "JSX style props for styling background colors, gradients, and images.",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/src/docs/background.mdx",
      "menu": [
        "Style Props",
        "Background"
      ],
      "route": "style-props/background",
      "tags": [
        "document"
      ],
      "toc": [
        {
          "value": "Background Attachment",
          "href": "#background-attachment",
          "depth": 2,
          "numbering": [
            1,
            1
          ],
          "parent": "root"
        },
        {
          "value": "Background Blend Mode",
          "href": "#background-blend-mode",
          "depth": 2,
          "numbering": [
            1,
            2
          ],
          "parent": "root"
        },
        {
          "value": "Background Clip",
          "href": "#background-clip",
          "depth": 2,
          "numbering": [
            1,
            3
          ],
          "parent": "root"
        },
        {
          "value": "Background Color",
          "href": "#background-color",
          "depth": 2,
          "numbering": [
            1,
            4
          ],
          "parent": "root"
        },
        {
          "value": "Background Origin",
          "href": "#background-origin",
          "depth": 2,
          "numbering": [
            1,
            5
          ],
          "parent": "root"
        },
        {
          "value": "Background Position",
          "href": "#background-position",
          "depth": 2,
          "numbering": [
            1,
            6
          ],
          "parent": "root"
        },
        {
          "value": "Background Repeat",
          "href": "#background-repeat",
          "depth": 2,
          "numbering": [
            1,
            7
          ],
          "parent": "root"
        },
        {
          "value": "Background Size",
          "href": "#background-size",
          "depth": 2,
          "numbering": [
            1,
            8
          ],
          "parent": "root"
        },
        {
          "value": "Background Image",
          "href": "#background-image",
          "depth": 2,
          "numbering": [
            1,
            9
          ],
          "parent": "root"
        },
        {
          "value": "Background Gradient",
          "href": "#background-gradient",
          "depth": 2,
          "numbering": [
            1,
            10
          ],
          "parent": "root"
        }
      ]
    },
    "mdx": "\n# Background\n\nJSX style props for styling background colors, gradients, and images.\n\n## Background Attachment\n\nUse `bgAttachment` to control the attachment of a background image.\n\n```jsx\n<Box bgAttachment=\"fixed\" bgImage=\"url(...)\" />\n```\n\n| Prop                                   | CSS Property            | Token Category |\n| -------------------------------------- | ----------------------- | -------------- |\n| `bgAttachment`, `backgroundAttachment` | `background-attachment` | -              |\n\n## Background Blend Mode\n\nUse `bgBlendMode` prop to control how an element's background image should blend\nwith the its background color.\n\n```jsx\n<Box bgBlendMode=\"multiply\" bgColor=\"red.200\" bgImage=\"url(...)\" />\n```\n\n## Background Clip\n\nUse `bgClip` to control the clipping of a background image.\n\n```jsx\n<Box bgClip=\"border-box\" bgImage=\"url(...)\" />\n```\n\n| Prop                       | CSS Property      | Token Category |\n| -------------------------- | ----------------- | -------------- |\n| `bgClip`, `backgroundClip` | `background-clip` | -              |\n\n## Background Color\n\nUse `bg`, `bgColor`, or `backgroundColor` props to set the background color of\nan element.\n\n```jsx\n<Box bg=\"red.200\" />\n<Box bgColor=\"red.200\" />\n\n// with opacity modifier\n<Box bg=\"blue.200/30\" />\n<Box bgColor=\"blue.200/30\" />\n```\n\n| Prop                         | CSS Property       | Token Category |\n| ---------------------------- | ------------------ | -------------- |\n| `bg`, `background`           | `background`       | `colors`       |\n| `bgColor`, `backgroundColor` | `background-color` | `colors`       |\n\n## Background Origin\n\nUse `bgOrigin` or `backgroundOrigin` to control the origin of a background\nimage.\n\n```jsx\n<Box bgOrigin=\"border-box\" bgImage=\"url(...)\" />\n```\n\n| Prop                           | CSS Property        | Token Category |\n| ------------------------------ | ------------------- | -------------- |\n| `bgOrigin`, `backgroundOrigin` | `background-origin` | -              |\n\n## Background Position\n\nProperties for controlling the src and position of a background image.\n\n```jsx\n<Box bgImage=\"url(...)\" bgPosition=\"center\" />\n```\n\n| Prop                                 | CSS Property       | Token Category |\n| ------------------------------------ | ------------------ | -------------- |\n| `bgPosition`, `backgroundPosition`   | `background-image` | -              |\n| `bgPositionX`, `backgroundPositionX` | `background-image` | -              |\n| `bgPositionY`, `backgroundPositionY` | `background-image` | -              |\n\n## Background Repeat\n\nUse `bgRepeat` or `backgroundRepeat` to control the repeat of a background\nimage.\n\n```jsx\n<Box bgRepeat=\"no-repeat\" bgImage=\"url(...)\" />\n```\n\n| Prop                           | CSS Property        | Token Category |\n| ------------------------------ | ------------------- | -------------- |\n| `bgRepeat`, `backgroundRepeat` | `background-repeat` | -              |\n\n## Background Size\n\nUse `bgSize` or `backgroundSize` to control the size of a background image.\n\n```jsx\n<Box bgSize=\"cover\" bgImage=\"url(...)\" />\n```\n\n| Prop                       | CSS Property      | Token Category |\n| -------------------------- | ----------------- | -------------- |\n| `bgSize`, `backgroundSize` | `background-size` | -              |\n\n## Background Image\n\nUse `bgImage` or `backgroundImage` to set the background image of an element.\n\n```jsx\n<Box bgImage=\"url(...)\" />\n<Box bgImage=\"radial-gradient(circle, #0000 45%, #000f 48%)\" />\n<Box bgImage=\"linear-gradient(black, white)\" />\n\n// with token reference\n<Box bgImage=\"linear-gradient({colors.red.200}, {colors.blue.200})\" />\n```\n\n| Prop                         | CSS Property       | Token Category |\n| ---------------------------- | ------------------ | -------------- |\n| `bgImage`, `backgroundImage` | `background-image` | assets         |\n\n## Background Gradient\n\nProperties to create a background gradient based on color stops.\n\n```jsx\n<Box bgGradient=\"to-r\" gradientFrom=\"red.200\" gradientTo=\"blue.200\" />\n```\n\n| Prop           | CSS Property       | Token Category |\n| -------------- | ------------------ | -------------- |\n| `bgGradient`   | `background-image` | `gradients`    |\n| `textGradient` | `background-image` | `gradients`    |\n| `gradientFrom` | `--gradient-from`  | `colors`       |\n| `gradientTo`   | `--gradient-to`    | `colors`       |\n| `gradientVia`  | `--gradient-via`   | `colors`       |\n"
  },
  "packages/bleh-ui/src/docs/border.mdx": {
    "meta": {
      "id": "Style Props-Border",
      "title": "Border",
      "description": "JSX style props for styling border and border radius.",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/src/docs/border.mdx",
      "menu": [
        "Style Props",
        "Border"
      ],
      "route": "style-props/border",
      "tags": [
        "document"
      ],
      "toc": [
        {
          "value": "Border Radius",
          "href": "#border-radius",
          "depth": 2,
          "numbering": [
            1,
            1
          ],
          "parent": "root"
        },
        {
          "value": "All sides",
          "href": "#all-sides",
          "depth": 3,
          "numbering": [
            1,
            1,
            1
          ],
          "parent": "root"
        },
        {
          "value": "Specific sides",
          "href": "#specific-sides",
          "depth": 3,
          "numbering": [
            1,
            1,
            2
          ],
          "parent": "root"
        },
        {
          "value": "Specific corners",
          "href": "#specific-corners",
          "depth": 3,
          "numbering": [
            1,
            1,
            3
          ],
          "parent": "root"
        },
        {
          "value": "Border Width",
          "href": "#border-width",
          "depth": 2,
          "numbering": [
            1,
            2
          ],
          "parent": "root"
        },
        {
          "value": "All sides",
          "href": "#all-sides-1",
          "depth": 3,
          "numbering": [
            1,
            2,
            1
          ],
          "parent": "root"
        },
        {
          "value": "Specific sides",
          "href": "#specific-sides-1",
          "depth": 3,
          "numbering": [
            1,
            2,
            2
          ],
          "parent": "root"
        },
        {
          "value": "Border Color",
          "href": "#border-color",
          "depth": 2,
          "numbering": [
            1,
            3
          ],
          "parent": "root"
        },
        {
          "value": "All sides",
          "href": "#all-sides-2",
          "depth": 3,
          "numbering": [
            1,
            3,
            1
          ],
          "parent": "root"
        },
        {
          "value": "Specific sides",
          "href": "#specific-sides-2",
          "depth": 3,
          "numbering": [
            1,
            3,
            2
          ],
          "parent": "root"
        },
        {
          "value": "Divide Width",
          "href": "#divide-width",
          "depth": 2,
          "numbering": [
            1,
            4
          ],
          "parent": "root"
        },
        {
          "value": "Divide Color",
          "href": "#divide-color",
          "depth": 2,
          "numbering": [
            1,
            5
          ],
          "parent": "root"
        },
        {
          "value": "Divide Style",
          "href": "#divide-style",
          "depth": 2,
          "numbering": [
            1,
            6
          ],
          "parent": "root"
        }
      ]
    },
    "mdx": "\n# Border\n\nJSX style props for styling border and border radius.\n\n## Border Radius\n\n### All sides\n\nUse the `rounded` or `borderRadius` props to apply border radius on all sides of\nan element.\n\n```jsx\n<Box borderRadius=\"400\" />\n<Box rounded=\"400\" /> // shorthand\n```\n\n| Prop                      | CSS Property    | Token Category |\n| ------------------------- | --------------- | -------------- |\n| `rounded`, `borderRadius` | `border-radius` | `radii`        |\n\n### Specific sides\n\nUse the `rounded{Left,Right,Top,Bottom}` or\n`border{Left,Right,Top,Bottom}Radius` prop, to apply border radius on a specific\nside of an element.\n\n```jsx\n<Box borderTopRadius=\"md\" />\n<Box roundedTop=\"md\" /> // shorthand\n\n<Box borderLeftRadius=\"md\" />\n<Box roundedLeft=\"md\" /> // shorthand\n```\n\nUse the logical equivalent to make the border radius adapt based on the text\ndirection.\n\n```jsx\n<Box roundedStart=\"md\" />\n<Box roundedEnd=\"md\" />\n```\n\n| Prop                                  | CSS Property                                           | Token Category |\n| ------------------------------------- | ------------------------------------------------------ | -------------- |\n| `roundedLeft`, `borderLeftRadius`     | `border-left-radius`                                   | `radii`        |\n| `roundedRight`, `borderRightRadius`   | `border-right-radius`                                  | `radii`        |\n| `roundedTop`, `borderTopRadius`       | `border-top-radius`                                    | `radii`        |\n| `roundedBottom`, `borderBottomRadius` | `border-bottom-radius`                                 | `radii`        |\n| `roundedStart`, `borderStartRadius`   | `border-start-start-radius`, `border-end-start-radius` | `radii`        |\n| `roundedEnd`, `borderEndRadius`       | `border-start-end-radius`, `border-end-end-radius`     | `radii`        |\n\n### Specific corners\n\nUse the `border{Top,Bottom}{Left,Right}Radius` properties, or the shorthand\nequivalent to round a specific corner.\n\n```jsx\n<Box borderTopLeftRadius=\"md\" />\n<Box roundedTopLeft=\"md\" /> // shorthand\n```\n\nUse the logical properties to adapt based on the text direction.\n\n```jsx\n<Box borderStartStartRadius=\"md\" />\n<Box roundedStartStart=\"md\" /> // shorthand\n```\n\n| Prop                                     | CSS Property                 | Token Category |\n| ---------------------------------------- | ---------------------------- | -------------- |\n| `roundedTopLeft`,`borderTopLeftRadius`   | `border-top-left-radius`     | `radii`        |\n| `roundedTopRight`,`borderTopRight`       | `border-top-right-radius`    | `radii`        |\n| `roundedBottomRight`,`borderBottomRight` | `border-bottom-right-radius` | `radii`        |\n| `roundedBottomLeft`,`borderBottomLeft`   | `border-bottom-left-radius`  | `radii`        |\n\n## Border Width\n\n### All sides\n\nUse the `borderWidth` prop to apply border width on all sides of an element.\n\n> Chakra applies `borderStyle: solid` and a global border color by default.\n> Specifying a border width is sufficient to apply the border.\n\n```jsx\n<Box borderWidth=\"1px\" />\n```\n\n| Prop          | CSS Property   | Token Category |\n| ------------- | -------------- | -------------- |\n| `borderWidth` | `border-width` | `borderWidths` |\n\n### Specific sides\n\nUse the `border{Left|Right|Top|Bottom}Width` prop to apply border width on a\nspecific side of an element.\n\n```jsx\n<Box borderTopWidth=\"1px\" />\n<Box borderLeftWidth=\"1px\" />\n```\n\nUse the logical equivalent to make the border width adapt based on the text\ndirection.\n\n```jsx\n<Box borderInlineStartWidth=\"1px\" />\n<Box borderInlineWidth=\"1px\" /> // shorthand\n```\n\n| Prop                                          | CSS Property                | Token Category |\n| --------------------------------------------- | --------------------------- | -------------- |\n| `borderTopWidth`                              | `border-top-width`          | `borderWidths` |\n| `borderLeftWidth`                             | `border-left-width`         | `borderWidths` |\n| `borderRightWidth`                            | `border-right-width`        | `borderWidths` |\n| `borderBottomWidth`                           | `border-bottom-width`       | `borderWidths` |\n| `borderStartWidth` , `borderInlineStartWidth` | `border-{start+end}-width`  |\n| `borderEndWidth` , `borderInlineEndWidth`     | `border-{start+end}-width`  |\n| `borderXWidth` , `borderInlineWidth`          | `border-{left,right}-width` | `borderWidths` |\n| `borderYWidth` , `borderBlockWidth`           | `border-{top,bottom}-width` | `borderWidths` |\n\n## Border Color\n\n### All sides\n\nUse the `borderColor` prop to apply border color on all sides of an element.\n\n```jsx\n<Box borderColor=\"red.400\" />\n\n// with opacity modifier\n<Box borderColor=\"red.400/20\" />\n```\n\n### Specific sides\n\nUse the `border{Left,Right,Top,Bottom}Color` prop to apply border color on a\nspecific side of an element.\n\n```jsx\n<Box borderTopColor=\"red.400\" />\n<Box borderLeftColor=\"red.400\" />\n```\n\nUse the logical properties to adapt based on the text direction.\n\n```jsx\n<Box borderStartColor=\"red.400\" />\n<Box borderEndColor=\"red.400\" />\n```\n\n| Prop                                          | CSS Property               | Token Category |\n| --------------------------------------------- | -------------------------- | -------------- |\n| `borderColor`                                 | `border-color`             | `colors`       |\n| `borderTopColor`                              | `border-top-color`         | `colors`       |\n| `borderLeftColor`                             | `border-left-color`        | `colors`       |\n| `borderRightColor`                            | `border-right-color`       | `colors`       |\n| `borderBottomColor`                           | `border-bottom-color`      | `colors`       |\n| `borderStartColor` , `borderInlineStartColor` | `border-{start,end}-color` | `colors`       |\n| `borderEndColor` , `borderInlineEndColor`     | `border-{start,end}-color` | `colors`       |\n| `borderXColor`, `borderInlineColor`           | `border-inline-color`      | `colors`       |\n| `borderYColor`, `borderBlockColor`            | `border-block-color`       | `colors`       |\n\n## Divide Width\n\nUse the `divide{X,Y}Width` prop to apply border width between elements. It uses\nthe CSS selector `> * + *` to apply the `border*` properties.\n\n```jsx\n<Box divideXWidth=\"1px\">\n  <Box>1</Box>\n  <Box>2</Box>\n</Box>\n\n<Box divideYWidth=\"1px\">\n  <Box>1</Box>\n  <Box>2</Box>\n</Box>\n```\n\n| Prop          | CSS Property                        | Token Category |\n| ------------- | ----------------------------------- | -------------- |\n| `divideWidth` | `border-{inline,block}-start-width` | `borderWidths` |\n\n## Divide Color\n\nUse the `divideColor` prop to apply border color between elements.\n\n```jsx\n<Box divideColor=\"red.400\">\n  <Box>1</Box>\n  <Box>2</Box>\n</Box>\n```\n\n| Prop          | CSS Property     | Token Category |\n| ------------- | ---------------- | -------------- |\n| `divideColor` | `--divide-color` | `colors`       |\n\n## Divide Style\n\nUse the `divideStyle` prop to apply border style between elements.\n\n```jsx\n<Box divideX=\"2px\" divideStyle=\"dashed\">\n  <Box>1</Box>\n  <Box>2</Box>\n</Box>\n```\n\n| Prop          | CSS Property     | Token Category |\n| ------------- | ---------------- | -------------- |\n| `divideStyle` | `--divide-style` | `borderStyle`  |\n"
  },
  "packages/bleh-ui/src/docs/changelog.mdx": {
    "meta": {
      "id": "Home-Changelog",
      "title": "Changelog",
      "description": "List of updates, improvements, and bug fixes.",
      "documentState": "InitialDraft",
      "order": 3,
      "repoPath": "packages/bleh-ui/src/docs/changelog.mdx",
      "menu": [
        "Home",
        "Changelog"
      ],
      "route": "home/changelog",
      "tags": [
        "document"
      ],
      "toc": [],
      "icon": "CalendarSync"
    },
    "mdx": "\n# Changelog\n\nList of updates, improvements, and bug fixes.\n"
  },
  "packages/bleh-ui/src/docs/components-layout.mdx": {
    "meta": {
      "id": "Layout",
      "title": "Layout",
      "description": "Components that structure the content on the page.",
      "documentState": "InitialDraft",
      "order": 1,
      "repoPath": "packages/bleh-ui/src/docs/components-layout.mdx",
      "menu": [
        "Components",
        "Layout"
      ],
      "route": "components/layout",
      "tags": [
        "layout"
      ],
      "toc": [],
      "icon": "LayoutTemplate"
    },
    "mdx": "\n# Layout\n\nComponents that structure the content on the page.\n\n- **Grid Systems**: e.g., Row, Column, Container.\n- **Flexbox Utilities**: e.g., Box, Spacer, Stack.\n- **Positioning**: e.g., Absolute, RelativeWrapper.\n- **Responsive Design**: e.g., Breakpoints, ResponsiveContainer.\n"
  },
  "packages/bleh-ui/src/docs/components.mdx": {
    "meta": {
      "id": "Components",
      "title": "Components",
      "description": "React components for building robust and visually appealing applications.",
      "documentState": "InitialDraft",
      "order": 3,
      "repoPath": "packages/bleh-ui/src/docs/components.mdx",
      "menu": [
        "Components"
      ],
      "route": "components",
      "tags": [
        "components",
        "react"
      ],
      "toc": []
    },
    "mdx": "\n# Components\n\n[Add a cool category overview component]\n"
  },
  "packages/bleh-ui/src/docs/data-display.mdx": {
    "meta": {
      "id": "Components-Data Display",
      "title": "Data Display",
      "description": "Components for presenting data or visual content.",
      "documentState": "InitialDraft",
      "order": 7,
      "repoPath": "packages/bleh-ui/src/docs/data-display.mdx",
      "menu": [
        "Components",
        "Data Display"
      ],
      "route": "components/data-display",
      "tags": [
        "document"
      ],
      "toc": [],
      "icon": "TableProperties"
    },
    "mdx": "\n# Data Display\n\nComponents for presenting data or visual content.\n\n- **Tables**: e.g., DataTable, TableRow, TableHeader.\n- **Cards**: e.g., Card, CardHeader, CardBody.\n- **Lists**: e.g., List, ListItem.\n- **Charts & Graphs**: e.g., LineChart, BarChart.\n- **Badges & Tags**: e.g., Badge, Tag.\n"
  },
  "packages/bleh-ui/src/docs/display.mdx": {
    "meta": {
      "id": "Style Props-Display",
      "title": "Display",
      "description": "Style props for styling display of an element.",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/src/docs/display.mdx",
      "menu": [
        "Style Props",
        "Display"
      ],
      "route": "style-props/display",
      "tags": [
        "document"
      ],
      "toc": [
        {
          "value": "Display Property",
          "href": "#display-property",
          "depth": 2,
          "numbering": [
            1,
            1
          ],
          "parent": "root"
        },
        {
          "value": "Hiding Elements",
          "href": "#hiding-elements",
          "depth": 2,
          "numbering": [
            1,
            2
          ],
          "parent": "root"
        },
        {
          "value": "Hide From",
          "href": "#hide-from",
          "depth": 3,
          "numbering": [
            1,
            2,
            1
          ],
          "parent": "root"
        },
        {
          "value": "Hide Below",
          "href": "#hide-below",
          "depth": 3,
          "numbering": [
            1,
            2,
            2
          ],
          "parent": "root"
        }
      ]
    },
    "mdx": "\n# Display\n\nStyle props for styling display of an element.\n\n## Display Property\n\n```jsx\n<Box display=\"flex\" />\n\n// responsive\n<Box display={{ base: \"none\", md: \"block\" }} />\n```\n\n| Prop      | CSS Property | Token Category |\n| --------- | ------------ | -------------- |\n| `display` | `display`    | -              |\n\n## Hiding Elements\n\n### Hide From\n\nUse the `hideFrom` prop to hide an element from a specific breakpoint.\n\n```jsx\n<Box display=\"flex\" hideFrom=\"md\" />\n```\n\n| Prop       | CSS Property | Token Category |\n| ---------- | ------------ | -------------- |\n| `hideFrom` | `display`    | `breakpoints`  |\n\n### Hide Below\n\nUse the `hideBelow` prop to hide an element below a specific breakpoint.\n\n```jsx\n<Box display=\"flex\" hideBelow=\"md\" />\n```\n\n| Prop        | CSS Property | Token Category |\n| ----------- | ------------ | -------------- |\n| `hideBelow` | `display`    | `breakpoints`  |\n"
  },
  "packages/bleh-ui/src/docs/effects.mdx": {
    "meta": {
      "id": "Style Props-Effects",
      "title": "Effects",
      "description": "JSX style props for styling box shadows, opacity, and more",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/src/docs/effects.mdx",
      "menu": [
        "Style Props",
        "Effects"
      ],
      "route": "style-props/effects",
      "tags": [
        "document"
      ],
      "toc": [
        {
          "value": "Box Shadow",
          "href": "#box-shadow",
          "depth": 2,
          "numbering": [
            1,
            1
          ],
          "parent": "root"
        },
        {
          "value": "Box Shadow Color",
          "href": "#box-shadow-color",
          "depth": 2,
          "numbering": [
            1,
            2
          ],
          "parent": "root"
        },
        {
          "value": "Opacity",
          "href": "#opacity",
          "depth": 2,
          "numbering": [
            1,
            3
          ],
          "parent": "root"
        },
        {
          "value": "Mix Blend Mode",
          "href": "#mix-blend-mode",
          "depth": 2,
          "numbering": [
            1,
            4
          ],
          "parent": "root"
        }
      ]
    },
    "mdx": "\n# Effects\n\nJSX style props for styling box shadows, opacity, and more\n\n## Box Shadow\n\nUse the `shadow` or `boxShadow` prop to apply a box shadow to an element.\n\n```jsx\n// hardcoded values\n<Box shadow=\"12px 12px 2px 1px rgba(0, 0, 255, .2)\" />\n\n// token values\n<Box shadow=\"lg\" />\n```\n\n| Prop                   | CSS Property     | Token Category |\n| ---------------------- | ---------------- | -------------- |\n| `shadows`, `boxShadow` | `box-shadow`     | `shadows`      |\n| `shadowColor`          | `--shadow-color` | `colors`       |\n\n## Box Shadow Color\n\nUse the `shadowColor` prop to set the color of a box shadow. This prop maps to\nthe `--shadow-color` CSS variable.\n\n```jsx\n<Box shadow=\"60px -16px var(--shadow-color)\" shadowColor=\"red\" />\n```\n\n| Prop          | CSS Property     | Token Category |\n| ------------- | ---------------- | -------------- |\n| `shadowColor` | `--shadow-color` | `colors`       |\n\n## Opacity\n\nUse the `opacity` prop to set the opacity of an element.\n\n```jsx\n<Box opacity=\"0.5\" />\n```\n\n| Prop      | CSS Property | Token Category |\n| --------- | ------------ | -------------- |\n| `opacity` | `opacity`    | `opacity`      |\n\n## Mix Blend Mode\n\nUse the `mixBlendMode` prop to control how an element's content should be\nblended with the background.\n\n```jsx\n<Box bg=\"red.400\">\n  <Image src=\"...\" mixBlendMode=\"hard-light\" />\n</Box>\n```\n\n| Prop           | CSS Property     | Token Category |\n| -------------- | ---------------- | -------------- |\n| `mixBlendMode` | `mix-blend-mode` | -              |\n"
  },
  "packages/bleh-ui/src/docs/feedback.mdx": {
    "meta": {
      "id": "Components-Feedback",
      "title": "Feedback",
      "description": "Components for providing user feedback.",
      "documentState": "InitialDraft",
      "order": 5,
      "repoPath": "packages/bleh-ui/src/docs/feedback.mdx",
      "menu": [
        "Components",
        "Feedback"
      ],
      "route": "components/feedback",
      "tags": [
        "document"
      ],
      "toc": [],
      "icon": "MessageCircle"
    },
    "mdx": "\n# Feedback\n\nComponents for providing user feedback.\n\n- **Notifications**: e.g., Toast, Alert.\n- **Status Indicators**: e.g., Spinner, ProgressBar.\n- **Modals & Overlays**: e.g., Modal, Tooltip, Popover.\n- **Validation**: e.g., ErrorMessage, SuccessMessage.\n"
  },
  "packages/bleh-ui/src/docs/filters.mdx": {
    "meta": {
      "id": "Style Props-Filters",
      "title": "Filters",
      "description": "JSX style props for applying various filters to elements.",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/src/docs/filters.mdx",
      "menu": [
        "Style Props",
        "Filters"
      ],
      "route": "style-props/filters",
      "tags": [
        "document"
      ],
      "toc": [
        {
          "value": "Filter",
          "href": "#filter",
          "depth": 2,
          "numbering": [
            1,
            1
          ],
          "parent": "root"
        },
        {
          "value": "Blur",
          "href": "#blur",
          "depth": 2,
          "numbering": [
            1,
            2
          ],
          "parent": "root"
        },
        {
          "value": "Contrast",
          "href": "#contrast",
          "depth": 2,
          "numbering": [
            1,
            3
          ],
          "parent": "root"
        },
        {
          "value": "Drop Shadow",
          "href": "#drop-shadow",
          "depth": 2,
          "numbering": [
            1,
            4
          ],
          "parent": "root"
        },
        {
          "value": "Grayscale",
          "href": "#grayscale",
          "depth": 2,
          "numbering": [
            1,
            5
          ],
          "parent": "root"
        },
        {
          "value": "Hue Rotate",
          "href": "#hue-rotate",
          "depth": 2,
          "numbering": [
            1,
            6
          ],
          "parent": "root"
        },
        {
          "value": "Invert",
          "href": "#invert",
          "depth": 2,
          "numbering": [
            1,
            7
          ],
          "parent": "root"
        },
        {
          "value": "Saturate",
          "href": "#saturate",
          "depth": 2,
          "numbering": [
            1,
            8
          ],
          "parent": "root"
        },
        {
          "value": "Sepia",
          "href": "#sepia",
          "depth": 2,
          "numbering": [
            1,
            9
          ],
          "parent": "root"
        },
        {
          "value": "Backdrop Filter",
          "href": "#backdrop-filter",
          "depth": 2,
          "numbering": [
            1,
            10
          ],
          "parent": "root"
        },
        {
          "value": "Backdrop Blur",
          "href": "#backdrop-blur",
          "depth": 2,
          "numbering": [
            1,
            11
          ],
          "parent": "root"
        },
        {
          "value": "Backdrop Contrast",
          "href": "#backdrop-contrast",
          "depth": 2,
          "numbering": [
            1,
            12
          ],
          "parent": "root"
        },
        {
          "value": "Backdrop Grayscale",
          "href": "#backdrop-grayscale",
          "depth": 2,
          "numbering": [
            1,
            13
          ],
          "parent": "root"
        },
        {
          "value": "Backdrop Hue Rotate",
          "href": "#backdrop-hue-rotate",
          "depth": 2,
          "numbering": [
            1,
            14
          ],
          "parent": "root"
        },
        {
          "value": "Backdrop Invert",
          "href": "#backdrop-invert",
          "depth": 2,
          "numbering": [
            1,
            15
          ],
          "parent": "root"
        },
        {
          "value": "Backdrop Opacity",
          "href": "#backdrop-opacity",
          "depth": 2,
          "numbering": [
            1,
            16
          ],
          "parent": "root"
        },
        {
          "value": "Backdrop Saturate",
          "href": "#backdrop-saturate",
          "depth": 2,
          "numbering": [
            1,
            17
          ],
          "parent": "root"
        },
        {
          "value": "Backdrop Sepia",
          "href": "#backdrop-sepia",
          "depth": 2,
          "numbering": [
            1,
            18
          ],
          "parent": "root"
        }
      ]
    },
    "mdx": "\n# Filters\n\nJSX style props for applying various filters to elements.\n\n## Filter\n\nUse the `filter` prop to apply visual effects like blur or color shift to an\nelement.\n\n```jsx\n<Box filter=\"blur(5px)\" />\n<Box filter=\"grayscale(80%)\" />\n```\n\n| Prop     | CSS Property | Token Category |\n| -------- | ------------ | -------------- |\n| `filter` | `filter`     | -              |\n\n## Blur\n\nUse the `blur` prop to apply a blur effect to an element. The requirement for\nthis prop is to set the `filter` prop to `auto`.\n\n```jsx\n// hardcoded value\n<Box filter=\"auto\" blur=\"5px\" />\n\n// token value\n<Box filter=\"auto\" blur=\"sm\" />\n```\n\n| Prop   | CSS Property | Token Category |\n| ------ | ------------ | -------------- |\n| `blur` | `--blur`     | `blurs`        |\n\n## Contrast\n\nUse the `contrast` prop to apply a contrast effect to an element. The\nrequirement for this prop is to use the `filter` prop and set it to `auto`.\n\n```jsx\n<Box filter=\"auto\" contrast=\"0.3\" />\n```\n\n| Prop       | CSS Property | Token Category |\n| ---------- | ------------ | -------------- |\n| `contrast` | `--contrast` | -              |\n\n## Drop Shadow\n\nUse the `dropShadow` prop to apply a drop shadow effect to an element. The\nrequirement for this prop is to use the `filter` prop and set it to `auto`.\n\n```jsx\n<Box filter=\"auto\" dropShadow=\"0px 0px 10px rgba(0, 0, 0, 0.5)\" />\n```\n\n| Prop         | CSS Property    | Token Category |\n| ------------ | --------------- | -------------- |\n| `dropShadow` | `--drop-shadow` | -              |\n\n## Grayscale\n\nUse the `grayscale` prop to apply a grayscale effect to an element. The\nrequirement for this prop is to use the `filter` prop and set it to `auto`.\n\n```jsx\n<Box filter=\"auto\" grayscale=\"64%\" />\n```\n\n| Prop        | CSS Property  | Token Category |\n| ----------- | ------------- | -------------- |\n| `grayscale` | `--grayscale` | -              |\n\n## Hue Rotate\n\nUse the `hueRotate` prop to apply a hue rotate effect to an element. The\nrequirement for this prop is to use the `filter` prop and set it to `auto`.\n\n```jsx\n<Box filter=\"auto\" hueRotate=\"30deg\" />\n```\n\n| Prop        | CSS Property   | Token Category |\n| ----------- | -------------- | -------------- |\n| `hueRotate` | `--hue-rotate` | -              |\n\n## Invert\n\nUse the `invert` prop to apply an invert effect to an element. The requirement\nfor this prop is to use the `filter` prop and set it to `auto`.\n\n```jsx\n<Box filter=\"auto\" invert=\"40%\" />\n```\n\n| Prop     | CSS Property | Token Category |\n| -------- | ------------ | -------------- |\n| `invert` | `--invert`   | -              |\n\n## Saturate\n\nUse the `saturate` prop to apply a saturate effect to an element. The\nrequirement for this prop is to use the `filter` prop and set it to `auto`.\n\n```jsx\n<Box filter=\"auto\" saturate=\"0.4\" />\n```\n\n| Prop       | CSS Property | Token Category |\n| ---------- | ------------ | -------------- |\n| `saturate` | `--saturate` | -              |\n\n## Sepia\n\nUse the `sepia` prop to apply a sepia effect to an element. The requirement for\nthis prop is to use the `filter` prop and set it to `auto`.\n\n```jsx\n<Box filter=\"auto\" sepia=\"0.4\" />\n```\n\n| Prop    | CSS Property | Token Category |\n| ------- | ------------ | -------------- |\n| `sepia` | `--sepia`    | -              |\n\n## Backdrop Filter\n\nUse the `backdropFilter` prop to apply visual effects like blur or color shift\nto the area behind an element. This creates a translucent effect.\n\n```jsx\n<Box backdropFilter=\"blur(5px)\" />\n<Box backdropFilter=\"grayscale(80%)\" />\n```\n\n| Prop             | CSS Property      | Token Category |\n| ---------------- | ----------------- | -------------- |\n| `backdropFilter` | `backdrop-filter` | -              |\n\n## Backdrop Blur\n\nUse the `backdropBlur` prop to apply a blur effect to the area behind an\nelement. The requirement for this prop is to set the `backdropFilter` prop to\n`auto`.\n\n```jsx\n// hardcoded value\n<Box backdropFilter=\"auto\" backdropBlur=\"5px\" />\n\n// token value\n<Box backdropFilter=\"auto\" backdropBlur=\"sm\" />\n```\n\n| Prop           | CSS Property      | Token Category |\n| -------------- | ----------------- | -------------- |\n| `backdropBlur` | `--backdrop-blur` | `blurs`        |\n\n## Backdrop Contrast\n\nUse the `backdropContrast` prop to apply a contrast effect to the area behind an\nelement. The requirement for this prop is to use the `backdropFilter` prop and\nset it to `auto`.\n\n```jsx\n<Box backdropFilter=\"auto\" backdropContrast=\"0.3\" />\n```\n\n| Prop               | CSS Property          | Token Category |\n| ------------------ | --------------------- | -------------- |\n| `backdropContrast` | `--backdrop-contrast` | -              |\n\n## Backdrop Grayscale\n\nUse the `backdropGrayscale` prop to apply a grayscale effect to the area behind\nan element. The requirement for this prop is to use the `backdropFilter` prop\nand set it to `auto`.\n\n```jsx\n<Box backdropFilter=\"auto\" backdropGrayscale=\"64%\" />\n```\n\n| Prop                | CSS Property           | Token Category |\n| ------------------- | ---------------------- | -------------- |\n| `backdropGrayscale` | `--backdrop-grayscale` | -              |\n\n## Backdrop Hue Rotate\n\nUse the `backdropHueRotate` prop to apply a hue rotate effect to the area behind\nan element. The requirement for this prop is to use the `backdropFilter` prop\nand set it to `auto`.\n\n```jsx\n<Box backdropFilter=\"auto\" backdropHueRotate=\"30deg\" />\n```\n\n| Prop                | CSS Property            | Token Category |\n| ------------------- | ----------------------- | -------------- |\n| `backdropHueRotate` | `--backdrop-hue-rotate` | -              |\n\n## Backdrop Invert\n\nUse the `backdropInvert` prop to apply an invert effect to the area behind an\nelement. The requirement for this prop is to use the `backdropFilter` prop and\nset it to `auto`.\n\n```jsx\n<Box backdropFilter=\"auto\" backdropInvert=\"40%\" />\n```\n\n| Prop             | CSS Property        | Token Category |\n| ---------------- | ------------------- | -------------- |\n| `backdropInvert` | `--backdrop-invert` | -              |\n\n## Backdrop Opacity\n\nUse the `backdropOpacity` prop to apply an opacity effect to the area behind an\nelement. The requirement for this prop is to use the `backdropFilter` prop and\nset it to `auto`.\n\n```jsx\n<Box backdropFilter=\"auto\" backdropOpacity=\"0.4\" />\n```\n\n| Prop              | CSS Property         | Token Category |\n| ----------------- | -------------------- | -------------- |\n| `backdropOpacity` | `--backdrop-opacity` | -              |\n\n## Backdrop Saturate\n\nUse the `backdropSaturate` prop to apply a saturate effect to the area behind an\nelement. The requirement for this prop is to use the `backdropFilter` prop and\nset it to `auto`.\n\n```jsx\n<Box backdropFilter=\"auto\" backdropSaturate=\"0.4\" />\n```\n\n| Prop               | CSS Property          | Token Category |\n| ------------------ | --------------------- | -------------- |\n| `backdropSaturate` | `--backdrop-saturate` | -              |\n\n## Backdrop Sepia\n\nUse the `backdropSepia` prop to apply a sepia effect to the area behind an\nelement. The requirement for this prop is to use the `backdropFilter` prop and\nset it to `auto`.\n\n```jsx\n<Box backdropFilter=\"auto\" backdropSepia=\"0.4\" />\n```\n\n| Prop            | CSS Property       | Token Category |\n| --------------- | ------------------ | -------------- |\n| `backdropSepia` | `--backdrop-sepia` | -              |\n"
  },
  "packages/bleh-ui/src/docs/flex-and-grid.mdx": {
    "meta": {
      "id": "Style Props-Flex and Grid",
      "title": "Flex and Grid",
      "description": "JSX style props to control flex and grid layouts",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/src/docs/flex-and-grid.mdx",
      "menu": [
        "Style Props",
        "Flex and Grid"
      ],
      "route": "style-props/flex-and-grid",
      "tags": [
        "document"
      ],
      "toc": [
        {
          "value": "Flex Basis",
          "href": "#flex-basis",
          "depth": 2,
          "numbering": [
            1,
            1
          ],
          "parent": "root"
        },
        {
          "value": "Flex Direction",
          "href": "#flex-direction",
          "depth": 2,
          "numbering": [
            1,
            2
          ],
          "parent": "root"
        },
        {
          "value": "Flex Wrap",
          "href": "#flex-wrap",
          "depth": 2,
          "numbering": [
            1,
            3
          ],
          "parent": "root"
        },
        {
          "value": "Flex",
          "href": "#flex",
          "depth": 2,
          "numbering": [
            1,
            4
          ],
          "parent": "root"
        },
        {
          "value": "Flex Grow",
          "href": "#flex-grow",
          "depth": 2,
          "numbering": [
            1,
            5
          ],
          "parent": "root"
        },
        {
          "value": "Flex Shrink",
          "href": "#flex-shrink",
          "depth": 2,
          "numbering": [
            1,
            6
          ],
          "parent": "root"
        },
        {
          "value": "Order",
          "href": "#order",
          "depth": 2,
          "numbering": [
            1,
            7
          ],
          "parent": "root"
        },
        {
          "value": "Gap",
          "href": "#gap",
          "depth": 2,
          "numbering": [
            1,
            8
          ],
          "parent": "root"
        },
        {
          "value": "Grid Template Columns",
          "href": "#grid-template-columns",
          "depth": 2,
          "numbering": [
            1,
            9
          ],
          "parent": "root"
        },
        {
          "value": "Grid Template Start/End",
          "href": "#grid-template-startend",
          "depth": 2,
          "numbering": [
            1,
            10
          ],
          "parent": "root"
        },
        {
          "value": "Grid Template Rows",
          "href": "#grid-template-rows",
          "depth": 2,
          "numbering": [
            1,
            11
          ],
          "parent": "root"
        },
        {
          "value": "Grid Row Start/End",
          "href": "#grid-row-startend",
          "depth": 2,
          "numbering": [
            1,
            12
          ],
          "parent": "root"
        },
        {
          "value": "Grid Autoflow",
          "href": "#grid-autoflow",
          "depth": 2,
          "numbering": [
            1,
            13
          ],
          "parent": "root"
        },
        {
          "value": "Grid Auto Columns",
          "href": "#grid-auto-columns",
          "depth": 2,
          "numbering": [
            1,
            14
          ],
          "parent": "root"
        },
        {
          "value": "Grid Auto Rows",
          "href": "#grid-auto-rows",
          "depth": 2,
          "numbering": [
            1,
            15
          ],
          "parent": "root"
        },
        {
          "value": "Justify Content",
          "href": "#justify-content",
          "depth": 2,
          "numbering": [
            1,
            16
          ],
          "parent": "root"
        },
        {
          "value": "Justify Items",
          "href": "#justify-items",
          "depth": 2,
          "numbering": [
            1,
            17
          ],
          "parent": "root"
        },
        {
          "value": "Align Content",
          "href": "#align-content",
          "depth": 2,
          "numbering": [
            1,
            18
          ],
          "parent": "root"
        },
        {
          "value": "Align Items",
          "href": "#align-items",
          "depth": 2,
          "numbering": [
            1,
            19
          ],
          "parent": "root"
        },
        {
          "value": "Align Self",
          "href": "#align-self",
          "depth": 2,
          "numbering": [
            1,
            20
          ],
          "parent": "root"
        },
        {
          "value": "Place Content",
          "href": "#place-content",
          "depth": 2,
          "numbering": [
            1,
            21
          ],
          "parent": "root"
        },
        {
          "value": "Place Items",
          "href": "#place-items",
          "depth": 2,
          "numbering": [
            1,
            22
          ],
          "parent": "root"
        },
        {
          "value": "Place Self",
          "href": "#place-self",
          "depth": 2,
          "numbering": [
            1,
            23
          ],
          "parent": "root"
        }
      ]
    },
    "mdx": "\n# Flex and Grid\n\nJSX style props to control flex and grid layouts\n\n## Flex Basis\n\nUse the `flexBasis` prop to set the initial main size of a flex item.\n\n```jsx\n<Flex>\n  <Box flexBasis=\"25%\" />\n  <Box flexBasis=\"25%\" />\n  <Box flexBasis=\"50%\" />\n</Flex>\n```\n\n| Prop        | CSS Property | Token Category |\n| ----------- | ------------ | -------------- |\n| `flexBasis` | `flex-basis` | -              |\n\n## Flex Direction\n\nUse the `flexDir` or `flexDirection` prop to set the direction of the main axis\nin a flex container.\n\n```jsx\n<Box display=\"flex\" flexDirection=\"column\">\n  <Box>Item 1</Box>\n  <Box>Item 2</Box>\n  <Box>Item 3</Box>\n</Box>\n```\n\nWhen using `Flex` component, the `direction` prop is aliased to `flexDirection`.\n\n```jsx\n<Flex direction=\"column\">\n  <Box>Item 1</Box>\n  <Box>Item 2</Box>\n  <Box>Item 3</Box>\n</Flex>\n```\n\n| Prop                       | CSS Property     | Token Category |\n| -------------------------- | ---------------- | -------------- |\n| `flexDir`, `flexDirection` | `flex-direction` | -              |\n\n## Flex Wrap\n\nUse the `flexWrap` prop to set whether flex items are forced onto one line or\ncan wrap onto multiple lines.\n\n```jsx\n<Box display=\"flex\" flexWrap=\"wrap\">\n  <Box>Item 1</Box>\n  <Box>Item 2</Box>\n  <Box>Item 3</Box>\n</Box>\n```\n\nWhen using `Flex` component, the `wrap` prop is aliased to `flexWrap`.\n\n```jsx\n<Flex wrap=\"wrap\">\n  <Box>Item 1</Box>\n  <Box>Item 2</Box>\n  <Box>Item 3</Box>\n</Flex>\n```\n\n| Prop       | CSS Property | Token Category |\n| ---------- | ------------ | -------------- |\n| `flexWrap` | `flex-wrap`  | -              |\n\n## Flex\n\nUse the `flex` prop to define the flexibility of a flex container or item.\n\n```jsx\n<Flex>\n  <Box flex=\"1\" />\n  <Box />\n</Flex>\n```\n\n| Prop   | CSS Property | Token Category |\n| ------ | ------------ | -------------- |\n| `flex` | `flex`       | -              |\n\n## Flex Grow\n\nUse the `flexGrow` prop to set the flex grow factor of a flex item.\n\n```jsx\n<Flex>\n  <Box flexGrow=\"0\" />\n  <Box flexGrow=\"1\" />\n</Flex>\n```\n\n| Prop       | CSS Property | Token Category |\n| ---------- | ------------ | -------------- |\n| `flexGrow` | `flex-grow`  | -              |\n\n## Flex Shrink\n\nUse the `flexShrink` prop to set the flex shrink factor of a flex item.\n\n```jsx\n<Flex>\n  <Box flexShrink=\"0\" />\n  <Box flexShrink=\"1\" />\n</Flex>\n```\n\n| Prop         | CSS Property  | Token Category |\n| ------------ | ------------- | -------------- |\n| `flexShrink` | `flex-shrink` | -              |\n\n## Order\n\nUse the `order` prop to set the order of a flex item.\n\n```jsx\n<Flex>\n  <Box order=\"0\" />\n  <Box order=\"1\" />\n</Flex>\n```\n\n| Prop    | CSS Property | Token Category |\n| ------- | ------------ | -------------- |\n| `order` | `order`      | -              |\n\n## Gap\n\nUse the `gap` prop to set the gap between items in a flex or grid container.\n\n```jsx\n<Flex gap=\"4\">\n  <Box>Item 1</Box>\n  <Box>Item 2</Box>\n  <Box>Item 3</Box>\n</Flex>\n```\n\n| Prop  | CSS Property | Token Category |\n| ----- | ------------ | -------------- |\n| `gap` | `gap`        | `spacing`      |\n\n## Grid Template Columns\n\nUse the `gridTemplateColumns` prop to define the columns of a grid container.\n\n```jsx\n<Box display=\"grid\" gridTemplateColumns=\"repeat(3, minmax(0, 1fr))\">\n  <Box>Item 1</Box>\n  <Box>Item 2</Box>\n  <Box>Item 3</Box>\n</Box>\n```\n\nWhen using `Grid` component, the `templateColumns` prop is aliased to\n`gridTemplateColumns`.\n\n```jsx\n<Grid templateColumns=\"repeat(3, minmax(0, 1fr))\">\n  <Box>Item 1</Box>\n  <Box>Item 2</Box>\n  <Box>Item 3</Box>\n</Grid>\n```\n\n## Grid Template Start/End\n\nUse the `gridTemplateStart` and `gridTemplateEnd` props to define the start and\nend of a grid container.\n\n```jsx\n<Box display=\"grid\" gridTemplateColumns=\"repeat(3, minmax(0, 1fr))\">\n  <Box>Item 1</Box>\n  <Box gridColumn=\"span 2 / span 2\">Item 2</Box>\n  <Box>Item 3</Box>\n</Box>\n```\n\n| Prop                | CSS Property          | Token Category |\n| ------------------- | --------------------- | -------------- |\n| `gridTemplateStart` | `grid-template-start` | -              |\n| `gridTemplateEnd`   | `grid-template-end`   | -              |\n\n## Grid Template Rows\n\nUse the `gridTemplateRows` prop to define the rows of a grid container.\n\n```jsx\n<Box display=\"grid\" gap=\"4\" gridTemplateRows=\"repeat(3, minmax(0, 1fr))\">\n  <Box>Item 1</Box>\n  <Box>Item 2</Box>\n  <Box>Item 3</Box>\n</Box>\n```\n\n| Prop               | CSS Property         | Token Category |\n| ------------------ | -------------------- | -------------- |\n| `gridTemplateRows` | `grid-template-rows` | -              |\n\n## Grid Row Start/End\n\nUse the `gridRowStart` and `gridRowEnd` props to define the start and end of a\ngrid item.\n\n```jsx\n<Box display=\"grid\" gap=\"4\" gridTemplateRows=\"repeat(3, minmax(0, 1fr))\">\n  <Box gridRowStart=\"1\" gridRowEnd=\"3\">\n    Item 1\n  </Box>\n  <Box>Item 2</Box>\n  <Box>Item 3</Box>\n</Box>\n```\n\n| Prop           | CSS Property     | Token Category |\n| -------------- | ---------------- | -------------- |\n| `gridRowStart` | `grid-row-start` | -              |\n| `gridRowEnd`   | `grid-row-end`   | -              |\n\n## Grid Autoflow\n\nUse the `gridAutoFlow` prop to define how auto-placed items get flowed into the\ngrid.\n\n```jsx\n<Box display=\"grid\" gridAutoFlow=\"row\">\n  <Box>Item 1</Box>\n  <Box>Item 2</Box>\n  <Box>Item 3</Box>\n</Box>\n```\n\n| Prop           | CSS Property     | Token Category |\n| -------------- | ---------------- | -------------- |\n| `gridAutoFlow` | `grid-auto-flow` | -              |\n\n## Grid Auto Columns\n\nUse the `gridAutoColumns` prop to specify the size of the grid columns that were\ncreated without an explicit size.\n\n```jsx\n<Box display=\"grid\" gridAutoColumns=\"120px\">\n  <Box>Item 1</Box>\n  <Box>Item 2</Box>\n  <Box>Item 3</Box>\n</Box>\n```\n\n| Prop              | CSS Property        | Token Category |\n| ----------------- | ------------------- | -------------- |\n| `gridAutoColumns` | `grid-auto-columns` | -              |\n\n## Grid Auto Rows\n\nUse the `gridAutoRows` prop to specify the size of the grid rows that were\ncreated without an explicit size.\n\n```jsx\n<Box display=\"grid\" gridTemplateRows=\"200px\" gridAutoRows=\"120px\">\n  <Box>Item 1</Box>\n  <Box>Item 2</Box>\n  <Box>Item 3</Box>\n</Box>\n```\n\n| Prop           | CSS Property     | Token Category |\n| -------------- | ---------------- | -------------- |\n| `gridAutoRows` | `grid-auto-rows` | -              |\n\n## Justify Content\n\nUse the `justifyContent` prop to align items along the main axis of a flex\ncontainer.\n\n```jsx\n<Box display=\"flex\" justifyContent=\"center\">\n  <Box>Item 1</Box>\n  <Box>Item 2</Box>\n  <Box>Item 3</Box>\n</Box>\n```\n\nWhen using the `Flex` component, the `justify` prop is aliased to\n`justifyContent`.\n\n```jsx\n<Flex justify=\"center\">\n  <Box>Item 1</Box>\n  <Box>Item 2</Box>\n  <Box>Item 3</Box>\n</Flex>\n```\n\n| Prop             | CSS Property      | Token Category |\n| ---------------- | ----------------- | -------------- |\n| `justifyContent` | `justify-content` | -              |\n\n## Justify Items\n\nUse the `justifyItems` prop to control the alignment of grid items within their\nscope.\n\n```jsx\n<Box display=\"grid\" justifyItems=\"center\">\n  <Box>Item 1</Box>\n  <Box>Item 2</Box>\n  <Box>Item 3</Box>\n</Box>\n```\n\n| Prop           | CSS Property    | Token Category |\n| -------------- | --------------- | -------------- |\n| `justifyItems` | `justify-items` | -              |\n\n## Align Content\n\nUse the `alignContent` prop to align rows of content along the cross axis of a\nflex container when there's extra space.\n\n```jsx\n<Box display=\"flex\" alignContent=\"center\">\n  <Box>Item 1</Box>\n  <Box>Item 2</Box>\n  <Box>Item 3</Box>\n</Box>\n```\n\nWhen using the `Flex` component, the `align` prop is aliased to `alignContent`.\n\n```jsx\n<Flex align=\"center\">\n  <Box>Item 1</Box>\n  <Box>Item 2</Box>\n  <Box>Item 3</Box>\n</Flex>\n```\n\n| Prop           | CSS Property    | Token Category |\n| -------------- | --------------- | -------------- |\n| `alignContent` | `align-content` | -              |\n\n## Align Items\n\nUse the `alignItems` prop to control the alignment of grid items within their\nscope.\n\n```jsx\n<Box display=\"grid\" alignItems=\"center\">\n  <Box>Item 1</Box>\n  <Box>Item 2</Box>\n  <Box>Item 3</Box>\n</Box>\n```\n\n## Align Self\n\nUse the `alignSelf` prop to control the alignment of a grid item within its\nscope.\n\n```jsx\n<Box display=\"grid\">\n  <Box alignSelf=\"center\">Item 1</Box>\n  <Box>Item 2</Box>\n  <Box>Item 3</Box>\n</Box>\n```\n\n| Prop        | CSS Property | Token Category |\n| ----------- | ------------ | -------------- |\n| `alignSelf` | `align-self` | -              |\n\n## Place Content\n\nUse the `placeContent` prop to align content along both the block and inline\ndirections at once. It works like `justifyContent` and `alignContent` combined,\nand can be used in flex and grid containers.\n\n```jsx\n<Flex placeContent=\"center\">\n  <Box>Item 1</Box>\n  <Box>Item 2</Box>\n  <Box>Item 3</Box>\n</Flex>\n```\n\n| Prop           | CSS Property    | Token Category |\n| -------------- | --------------- | -------------- |\n| `placeContent` | `place-content` | -              |\n\n## Place Items\n\nUse the `placeItems` prop to align items along both the block and inline\ndirections at once. It works like `justifyItems` and `alignItems` combined, and\ncan be used in flex and grid containers.\n\n```jsx\n<Box display=\"grid\" placeItems=\"center\">\n  <Box>Item 1</Box>\n  <Box>Item 2</Box>\n  <Box>Item 3</Box>\n</Box>\n```\n\n| Prop         | CSS Property  | Token Category |\n| ------------ | ------------- | -------------- |\n| `placeItems` | `place-items` | -              |\n\n## Place Self\n\nUse the `placeSelf` prop to align a grid item along both the block and inline\ndirections at once.\n\n```jsx\n<Box display=\"grid\">\n  <Box placeSelf=\"center\">Item 1</Box>\n  <Box>Item 2</Box>\n  <Box>Item 3</Box>\n</Box>\n```\n\n| Prop        | CSS Property | Token Category |\n| ----------- | ------------ | -------------- |\n| `placeSelf` | `place-self` | -              |\n"
  },
  "packages/bleh-ui/src/docs/forms.mdx": {
    "meta": {
      "id": "Forms",
      "title": "Forms",
      "description": "components useful for assembling forms",
      "documentState": "InitialDraft",
      "order": 4,
      "repoPath": "packages/bleh-ui/src/docs/forms.mdx",
      "menu": [
        "Components",
        "Inputs"
      ],
      "route": "components/inputs",
      "tags": [
        "forms"
      ],
      "toc": [],
      "icon": "TextCursorInput"
    },
    "mdx": "\n# Inputs\n\nComponents for user input and interaction.\n\n- **Text Inputs**: e.g., InputField, TextArea.\n- **Selection Controls**: e.g., Dropdown, Checkbox, RadioButton.\n- **Buttons**: e.g., Button, IconButton, ToggleButton.\n- **Sliders & Pickers**: e.g., RangeSlider, DatePicker, TimePicker.\n"
  },
  "packages/bleh-ui/src/docs/generated/index.mdx": {
    "meta": {
      "id": "AI1733919690376",
      "title": "Unsorted Generated Content",
      "description": "Index page for generated content.",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/src/docs/generated/index.mdx",
      "menu": [
        "Unsorted"
      ],
      "route": "unsorted",
      "tags": [
        "unsorted"
      ],
      "toc": []
    },
    "mdx": "\n# Unsorted\n\nDocuments here are generated and not sorted yet. Please sort them into the\ncorrect category.\n"
  },
  "packages/bleh-ui/src/docs/getting-started.mdx": {
    "meta": {
      "id": "Home-Getting Started",
      "title": "Getting Started",
      "description": "Quick start guide to set up and use the package.",
      "documentState": "InitialDraft",
      "order": 2,
      "repoPath": "packages/bleh-ui/src/docs/getting-started.mdx",
      "menu": [
        "Home",
        "Getting started"
      ],
      "route": "home/getting-started",
      "tags": [
        "document"
      ],
      "toc": [],
      "icon": "Rocket"
    },
    "mdx": "\n# Getting Started\n\nQuick start guide to set up and use the package.\n"
  },
  "packages/bleh-ui/src/docs/home.mdx": {
    "meta": {
      "id": "Home",
      "title": "Home",
      "description": "Start here if you're new.",
      "documentState": "InitialDraft",
      "order": 1,
      "repoPath": "packages/bleh-ui/src/docs/home.mdx",
      "menu": [
        "Home"
      ],
      "route": "home",
      "tags": [
        "forms"
      ],
      "toc": [
        {
          "value": "Apps",
          "href": "#apps",
          "depth": 2,
          "numbering": [
            1,
            1
          ],
          "parent": "root"
        },
        {
          "value": "docs",
          "href": "#docs",
          "depth": 3,
          "numbering": [
            1,
            1,
            1
          ],
          "parent": "root"
        },
        {
          "value": "Packages",
          "href": "#packages",
          "depth": 2,
          "numbering": [
            1,
            2
          ],
          "parent": "root"
        },
        {
          "value": "@bleh-ui/react",
          "href": "#bleh-uireact",
          "depth": 3,
          "numbering": [
            1,
            2,
            1
          ],
          "parent": "root"
        },
        {
          "value": "@bleh-ui/icons",
          "href": "#bleh-uiicons",
          "depth": 3,
          "numbering": [
            1,
            2,
            2
          ],
          "parent": "root"
        }
      ]
    },
    "mdx": "\n# Hello!\n\nThis repository aims to solve 2 problems:\n\n1. Provide everything necessary to create beautiful, accessible and resilient\n   user-interfaces.\n2. Document all the bits and pieces that make that happen.\n\nThe repository is currently structured into 3 workspaces, 1 app-workspace and 2\npackage-workspaces.\n\n## Apps\n\n### docs\n\nThe doc-app is a developer tool for creating and managing content-driven web\napplications by leveraging MDX files, structured metadata, and reusable UI\ncomponents.\n\n- **Web Frontend**: The app generates a web-based frontend for browsing and\n  interacting with the content.\n- **Development Environment**: A development server allows users to edit\n  documents and add images directly through their browser.\n- **Content Indexing**: The app scans designated folders for MDX documents,\n  automatically generating and linking pages.\n- **Content Organization**: Frontmatter in MDX files provides metadata for\n  structuring menus and annotating content, enabling flexible organization.\n- **UI Component Integration**: The app utilizes components from\n  `@bleh-ui/react`, demonstrating how to create polished frontends with this UI\n  library.\n\n## Packages\n\nCurrently this two packages contain the mentioned bits and pieces, reusable\nacross several frontends:\n\n### @bleh-ui/react\n\nThis package contains react components & hooks, as well as a ct-tailored\ndefault-theme.\n\n### @bleh-ui/icons\n\nThis package contains icons for many different scenarios.\n"
  },
  "packages/bleh-ui/src/docs/hooks.mdx": {
    "meta": {
      "id": "Hooke",
      "title": "Hooke",
      "description": "react hooks",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/src/docs/hooks.mdx",
      "menu": [
        "Hooks"
      ],
      "route": "hooks",
      "tags": [
        "hooks",
        "react"
      ],
      "toc": []
    },
    "mdx": "\n# Hooks\n\nA colleciton of useful react hooks.\n"
  },
  "packages/bleh-ui/src/docs/inputs.mdx": {
    "meta": {
      "id": "Components-Forms",
      "title": "Forms",
      "description": "Components specifically tailored for form creation and management.",
      "documentState": "InitialDraft",
      "order": 9,
      "repoPath": "packages/bleh-ui/src/docs/inputs.mdx",
      "menu": [
        "Components",
        "Forms"
      ],
      "route": "components/forms",
      "tags": [
        "document"
      ],
      "toc": [],
      "icon": "ClipboardPen"
    },
    "mdx": "\n# Forms\n\nComponents specifically tailored for form creation and management.\n\n- **Fieldsets**: e.g., FormGroup, FieldSet.\n- **Validation Components**: e.g., ValidationMessage, FormError.\n- **Action Controls**: e.g., SubmitButton, ResetButton.\n"
  },
  "packages/bleh-ui/src/docs/installation.mdx": {
    "meta": {
      "id": "Home-Installation",
      "title": "Installation",
      "description": "Learn how to install @bleh-ui/react and its dependencies.",
      "documentState": "InitialDraft",
      "order": 1,
      "repoPath": "packages/bleh-ui/src/docs/installation.mdx",
      "menu": [
        "Home",
        "Installation"
      ],
      "route": "home/installation",
      "tags": [
        "document"
      ],
      "toc": [
        {
          "value": "Development Setup",
          "href": "#development-setup",
          "depth": 2,
          "numbering": [
            1,
            1
          ],
          "parent": "root"
        },
        {
          "value": "Installation",
          "href": "#installation",
          "depth": 3,
          "numbering": [
            1,
            1,
            1
          ],
          "parent": "root"
        },
        {
          "value": "Requirements",
          "href": "#requirements",
          "depth": 4,
          "numbering": [
            1,
            1,
            1,
            1
          ],
          "parent": "root"
        },
        {
          "value": "Install dependencies",
          "href": "#install-dependencies",
          "depth": 4,
          "numbering": [
            1,
            1,
            1,
            2
          ],
          "parent": "root"
        },
        {
          "value": "Development",
          "href": "#development",
          "depth": 3,
          "numbering": [
            1,
            1,
            2
          ],
          "parent": "root"
        },
        {
          "value": "Build",
          "href": "#build",
          "depth": 3,
          "numbering": [
            1,
            1,
            3
          ],
          "parent": "root"
        }
      ],
      "icon": "Download"
    },
    "mdx": "\n## Development Setup\n\n### Installation\n\nMake sure you fulfill the requirements below and install dependencies with the\nprovided command.\n\n#### Requirements\n\nThe following software needs to be installed on your system before you can\nproceed:\n\n- Node v20+\n- pnpm v9+\n\n#### Install dependencies\n\n```bash\n$ pnpm install\n```\n\n### Development\n\n1. If you just set up the repository, do an initial [build](#build).\n2. Start the development environment with the following command\n\n```bash\n$ pnpm run dev\n```\n\n1. Open the documentation app in the\n   browser: [http://localhost:5173/](http://localhost:5173/)\n\n### Build\n\nTo build packages & the documentation app:\n\n```bash\n$ pnpm run build\n```\n\nTo only build packages:\n\n```bash\n$ pnpm run build-packages\n```\n"
  },
  "packages/bleh-ui/src/docs/interactivity.mdx": {
    "meta": {
      "id": "Style Props-Interactivity",
      "title": "Interactivity",
      "description": "JSX style props to enhance interactivity on an element",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/src/docs/interactivity.mdx",
      "menu": [
        "Style Props",
        "Interactivity"
      ],
      "route": "style-props/interactivity",
      "tags": [
        "document"
      ],
      "toc": [
        {
          "value": "Accent Color",
          "href": "#accent-color",
          "depth": 2,
          "numbering": [
            1,
            1
          ],
          "parent": "root"
        },
        {
          "value": "Appearance",
          "href": "#appearance",
          "depth": 2,
          "numbering": [
            1,
            2
          ],
          "parent": "root"
        },
        {
          "value": "Caret Color",
          "href": "#caret-color",
          "depth": 2,
          "numbering": [
            1,
            3
          ],
          "parent": "root"
        },
        {
          "value": "Cursor",
          "href": "#cursor",
          "depth": 2,
          "numbering": [
            1,
            4
          ],
          "parent": "root"
        },
        {
          "value": "Pointer Events",
          "href": "#pointer-events",
          "depth": 2,
          "numbering": [
            1,
            5
          ],
          "parent": "root"
        },
        {
          "value": "Resize",
          "href": "#resize",
          "depth": 2,
          "numbering": [
            1,
            6
          ],
          "parent": "root"
        },
        {
          "value": "Scrollbar",
          "href": "#scrollbar",
          "depth": 2,
          "numbering": [
            1,
            7
          ],
          "parent": "root"
        },
        {
          "value": "Scroll Behavior",
          "href": "#scroll-behavior",
          "depth": 2,
          "numbering": [
            1,
            8
          ],
          "parent": "root"
        },
        {
          "value": "Scroll Margin",
          "href": "#scroll-margin",
          "depth": 2,
          "numbering": [
            1,
            9
          ],
          "parent": "root"
        },
        {
          "value": "Scroll Padding",
          "href": "#scroll-padding",
          "depth": 2,
          "numbering": [
            1,
            10
          ],
          "parent": "root"
        },
        {
          "value": "Scroll Snap Margin",
          "href": "#scroll-snap-margin",
          "depth": 2,
          "numbering": [
            1,
            11
          ],
          "parent": "root"
        },
        {
          "value": "Scroll Snap Type",
          "href": "#scroll-snap-type",
          "depth": 2,
          "numbering": [
            1,
            12
          ],
          "parent": "root"
        },
        {
          "value": "Scroll Snap Strictness",
          "href": "#scroll-snap-strictness",
          "depth": 2,
          "numbering": [
            1,
            13
          ],
          "parent": "root"
        },
        {
          "value": "Touch Action",
          "href": "#touch-action",
          "depth": 2,
          "numbering": [
            1,
            14
          ],
          "parent": "root"
        },
        {
          "value": "User Select",
          "href": "#user-select",
          "depth": 2,
          "numbering": [
            1,
            15
          ],
          "parent": "root"
        },
        {
          "value": "Will Change",
          "href": "#will-change",
          "depth": 2,
          "numbering": [
            1,
            16
          ],
          "parent": "root"
        }
      ]
    },
    "mdx": "\n# Interactivity\n\nJSX style props to enhance interactivity on an element\n\n## Accent Color\n\nUse the `accentColor` prop to set the accent color for browser generated\nuser-interface controls.\n\n```jsx\n// hardcoded\n<label>\n  <chakra.input type=\"checkbox\" accentColor=\"#3b82f6\" />\n</label>\n\n// token value\n<label>\n  <chakra.input type=\"checkbox\" accentColor=\"blue.500\" />\n</label>\n```\n\n| Prop          | CSS Property   | Token Category |\n| ------------- | -------------- | -------------- |\n| `accentColor` | `accent-color` | `colors`       |\n\n## Appearance\n\nUse the `appearance` prop to set the appearance of an element.\n\n```jsx\n<chakra.select appearance=\"none\">\n  <option value=\"1\">Option 1</option>\n  <option value=\"2\">Option 2</option>\n  <option value=\"3\">Option 3</option>\n</chakra.select>\n```\n\n| Prop         | CSS Property | Token Category |\n| ------------ | ------------ | -------------- |\n| `appearance` | `appearance` | -              |\n\n## Caret Color\n\nUse the `caretColor` prop to set the color of the text cursor (caret) in an\ninput or textarea\n\n```jsx\n// hardcoded\n<chakra.input caretColor=\"#3b82f6\" />\n\n// token value\n<chakra.input caretColor=\"blue.500\" />\n```\n\n| Prop         | CSS Property  | Token Category |\n| ------------ | ------------- | -------------- |\n| `caretColor` | `caret-color` | `colors`       |\n\n## Cursor\n\nUse the `cursor` prop to set the mouse cursor image to show when the mouse\npointer is over an element.\n\n```jsx\n<Box cursor=\"pointer\" />\n```\n\n| Prop     | CSS Property | Token Category |\n| -------- | ------------ | -------------- |\n| `cursor` | `cursor`     | -              |\n\n## Pointer Events\n\nUse the `pointerEvents` prop to control how pointer events are handled on an\nelement.\n\n```jsx\n<Box pointerEvents=\"none\">Can't click me</Box>\n```\n\n| Prop            | CSS Property     | Token Category |\n| --------------- | ---------------- | -------------- |\n| `pointerEvents` | `pointer-events` | -              |\n\n## Resize\n\nUse the `resize` prop to control whether an element is resizable, and if so, in\nwhich directions.\n\n```jsx\n<chakra.textarea resize=\"both\" />\n<chakra.textarea resize=\"horizontal\" />\n<chakra.textarea resize=\"vertical\" />\n```\n\n| Prop     | CSS Property | Token Category |\n| -------- | ------------ | -------------- |\n| `resize` | `resize`     | -              |\n\n## Scrollbar\n\nUse the `scrollbar` prop to customize the appearance of scrollbars.\n\n```jsx\n<Box scrollbar=\"hidden\" maxH=\"100px\" overflowY=\"auto\">\n  Scrollbar hidden\n</Box>\n```\n\n## Scroll Behavior\n\nUse the `scrollBehavior` prop to set the behavior for a scrolling box when\nscrolling is triggered by the navigation or JavaScript code.\n\n```jsx\n<Box maxH=\"100px\" overflowY=\"auto\" scrollBehavior=\"smooth\">\n  <div>Scroll me</div>\n</Box>\n```\n\n| Prop             | CSS Property      | Token Category |\n| ---------------- | ----------------- | -------------- |\n| `scrollBehavior` | `scroll-behavior` | -              |\n\n## Scroll Margin\n\nUse the `scrollMargin*` prop to set margins around scroll containers.\n\n```jsx\n<Box maxH=\"100px\" overflowY=\"auto\" scrollMarginY=\"2\">\n  Scrollbar Container with block padding\n</Box>\n```\n\n| Prop                                  | CSS Property                 | Token Category |\n| ------------------------------------- | ---------------------------- | -------------- |\n| `scrollMarginX` ,`scrollMarginInline` | `scroll-margin-inline`       | `spacing`      |\n| `scrollMarginInlineStart`             | `scroll-margin-inline-start` | `spacing`      |\n| `scrollMarginInlineEnd`               | `scroll-margin-inline-end`   | `spacing`      |\n| `scrollMarginY` , `scrollMarginBlock` | `scroll-margin-block`        | `spacing`      |\n| `scrollMarginBlockStart`              | `scroll-margin-block-start`  | `spacing`      |\n| `scrollMarginBlockEnd`                | `scroll-margin-block-end`    | `spacing`      |\n| `scrollMarginLeft`                    | `scroll-margin-left`         | `spacing`      |\n| `scrollMarginRight`                   | `scroll-margin-right`        | `spacing`      |\n| `scrollMarginTop`                     | `scroll-margin-top`          | `spacing`      |\n| `scrollMarginBottom`                  | `scroll-margin-bottom`       | `spacing`      |\n\n## Scroll Padding\n\nUse the `scrollPadding*` prop to set padding inside scroll containers.\n\n```jsx\n<Box maxH=\"100px\" overflowY=\"auto\" scrollPaddingY=\"2\">\n  Scrollbar Container with block padding\n</Box>\n```\n\n| Prop                                     | CSS Property                  | Token Category |\n| ---------------------------------------- | ----------------------------- | -------------- |\n| `scrollPaddingX` , `scrollPaddingInline` | `scroll-padding-inline`       | `spacing`      |\n| `scrollPaddingInlineStart`               | `scroll-padding-inline-start` | `spacing`      |\n| `scrollPaddingInlineEnd`                 | `scroll-padding-inline-end`   | `spacing`      |\n| `scrollPaddingY` , `scrollPaddingBlock`  | `scroll-padding-block`        | `spacing`      |\n| `scrollPaddingBlockStart`                | `scroll-padding-block-start`  | `spacing`      |\n| `scrollPaddingBlockEnd`                  | `scroll-padding-block-end`    | `spacing`      |\n| `scrollPaddingLeft`                      | `scroll-padding-left`         | `spacing`      |\n| `scrollPaddingRight`                     | `scroll-padding-right`        | `spacing`      |\n| `scrollPaddingTop`                       | `scroll-padding-top`          | `spacing`      |\n| `scrollPaddingBottom`                    | `scroll-padding-bottom`       | `spacing`      |\n\n## Scroll Snap Margin\n\nUse the `scrollSnapMargin*` prop to set margins around scroll containers.\n\n```jsx\n<Box maxH=\"100px\" overflowY=\"auto\" scrollSnapMarginY=\"2\">\n  Scrollbar Container with block padding\n</Box>\n```\n\n| Prop                     | CSS Property           | Token Category |\n| ------------------------ | ---------------------- | -------------- |\n| `scrollSnapMargin`       | `scroll-margin`        | `spacing`      |\n| `scrollSnapMarginTop`    | `scroll-margin-top`    | `spacing`      |\n| `scrollSnapMarginBottom` | `scroll-margin-bottom` | `spacing`      |\n| `scrollSnapMarginLeft`   | `scroll-margin-left`   | `spacing`      |\n| `scrollSnapMarginRight`  | `scroll-margin-right`  | `spacing`      |\n\n## Scroll Snap Type\n\nUse the `scrollSnapType` prop to control how strictly snap points are enforced\nin a scroll container.\n\n```jsx\n<Box maxH=\"100px\" overflowY=\"auto\" scrollSnapType=\"x\">\n  Scroll container with x snap type\n</Box>\n```\n\n| Value  |                                      |\n| ------ | ------------------------------------ |\n| `none` | `none`                               |\n| `x`    | `x var(--scroll-snap-strictness)`    |\n| `y`    | `y var(--scroll-snap-strictness)`    |\n| `both` | `both var(--scroll-snap-strictness)` |\n\n## Scroll Snap Strictness\n\nUse the `scrollSnapStrictness` prop to set the scroll snap strictness of an\nelement. This requires `scrollSnapType` to be set to `x`,`y` or `both`.\n\nIt's values can be `mandatory` or `proximity` values, and maps to\n`var(--scroll-snap-strictness)`.\n\n```jsx\n<Box maxH=\"100px\" overflowY=\"auto\" scrollSnapStrictness=\"proximity\">\n  <Box>Item 1</Box>\n  <Box>Item 2</Box>\n</Box>\n```\n\n| Prop                   | CSS Property               | Token Category |\n| ---------------------- | -------------------------- | -------------- |\n| `scrollSnapStrictness` | `--scroll-snap-strictness` | -              |\n\n## Touch Action\n\nUse the `touchAction` prop to control how an element's region can be manipulated\nby a touchscreen user\n\n```jsx\n<Box touchAction=\"none\" />\n```\n\n| Prop          | CSS Property   | Token Category |\n| ------------- | -------------- | -------------- |\n| `touchAction` | `touch-action` | -              |\n\n## User Select\n\nUse the `userSelect` prop to control whether the user can select text within an\nelement.\n\n```jsx\n<Box userSelect=\"none\">\n  <p>Can't Select me</p>\n</Box>\n```\n\n| Prop         | CSS Property  | Token Category |\n| ------------ | ------------- | -------------- |\n| `userSelect` | `user-select` | -              |\n\n## Will Change\n\nUse the `willChange` prop to hint browsers how an element's property is expected\nto change.\n\n```jsx\n<Box willChange=\"transform\" />\n```\n\n| Prop         | CSS Property  | Token Category |\n| ------------ | ------------- | -------------- |\n| `willChange` | `will-change` | -              |\n"
  },
  "packages/bleh-ui/src/docs/known-issues.mdx": {
    "meta": {
      "id": "Home-Known issues",
      "title": "Known issues",
      "description": "Current bugs, limitations, and compatibility issues with possible workarounds.",
      "documentState": "InitialDraft",
      "documentAudiences": [],
      "order": 4,
      "repoPath": "packages/bleh-ui/src/docs/known-issues.mdx",
      "menu": [
        "Home",
        "Bugs & Issues"
      ],
      "route": "home/bugs-issues",
      "tags": [
        "document"
      ],
      "toc": [],
      "icon": "Bug"
    },
    "mdx": "\n# Known issues\n\nCurrent bugs, limitations, and compatibility issues with possible workarounds.\n"
  },
  "packages/bleh-ui/src/docs/layout.mdx": {
    "meta": {
      "id": "Style Props-Layout",
      "title": "Layout",
      "description": "JSX style props to control the width, height, and spacing of elements",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/src/docs/layout.mdx",
      "menu": [
        "Style Props",
        "Layout"
      ],
      "route": "style-props/layout",
      "tags": [
        "document"
      ],
      "toc": [
        {
          "value": "Aspect Ratio",
          "href": "#aspect-ratio",
          "depth": 2,
          "numbering": [
            1,
            1
          ],
          "parent": "root"
        },
        {
          "value": "Break",
          "href": "#break",
          "depth": 2,
          "numbering": [
            1,
            2
          ],
          "parent": "root"
        },
        {
          "value": "Break After",
          "href": "#break-after",
          "depth": 3,
          "numbering": [
            1,
            2,
            1
          ],
          "parent": "root"
        },
        {
          "value": "Break Before",
          "href": "#break-before",
          "depth": 3,
          "numbering": [
            1,
            2,
            2
          ],
          "parent": "root"
        },
        {
          "value": "Break Inside",
          "href": "#break-inside",
          "depth": 3,
          "numbering": [
            1,
            2,
            3
          ],
          "parent": "root"
        },
        {
          "value": "Box Decoration Break",
          "href": "#box-decoration-break",
          "depth": 2,
          "numbering": [
            1,
            3
          ],
          "parent": "root"
        },
        {
          "value": "Box Sizing",
          "href": "#box-sizing",
          "depth": 2,
          "numbering": [
            1,
            4
          ],
          "parent": "root"
        },
        {
          "value": "Columns",
          "href": "#columns",
          "depth": 2,
          "numbering": [
            1,
            5
          ],
          "parent": "root"
        },
        {
          "value": "Float",
          "href": "#float",
          "depth": 2,
          "numbering": [
            1,
            6
          ],
          "parent": "root"
        },
        {
          "value": "Clear",
          "href": "#clear",
          "depth": 2,
          "numbering": [
            1,
            7
          ],
          "parent": "root"
        },
        {
          "value": "Isolation",
          "href": "#isolation",
          "depth": 2,
          "numbering": [
            1,
            8
          ],
          "parent": "root"
        },
        {
          "value": "Object Fit",
          "href": "#object-fit",
          "depth": 2,
          "numbering": [
            1,
            9
          ],
          "parent": "root"
        },
        {
          "value": "Object Position",
          "href": "#object-position",
          "depth": 2,
          "numbering": [
            1,
            10
          ],
          "parent": "root"
        },
        {
          "value": "Overflow",
          "href": "#overflow",
          "depth": 2,
          "numbering": [
            1,
            11
          ],
          "parent": "root"
        },
        {
          "value": "Overscroll Behavior",
          "href": "#overscroll-behavior",
          "depth": 2,
          "numbering": [
            1,
            12
          ],
          "parent": "root"
        },
        {
          "value": "Position",
          "href": "#position",
          "depth": 2,
          "numbering": [
            1,
            13
          ],
          "parent": "root"
        },
        {
          "value": "Top / Right / Bottom / Left",
          "href": "#top--right--bottom--left",
          "depth": 2,
          "numbering": [
            1,
            14
          ],
          "parent": "root"
        },
        {
          "value": "Visibility",
          "href": "#visibility",
          "depth": 2,
          "numbering": [
            1,
            15
          ],
          "parent": "root"
        },
        {
          "value": "Z-Index",
          "href": "#z-index",
          "depth": 2,
          "numbering": [
            1,
            16
          ],
          "parent": "root"
        }
      ]
    },
    "mdx": "\n# Layout\n\nJSX style props to control the width, height, and spacing of elements\n\n## Aspect Ratio\n\nUse the `aspectRatio` prop to set the desired aspect ratio of an element.\n\n```jsx\n// raw value\n<Box aspectRatio=\"1.2\" />\n\n// token\n<Box aspectRatio=\"square\" />\n```\n\n| Prop          | CSS Property   | Token Category |\n| ------------- | -------------- | -------------- |\n| `aspectRatio` | `aspect-ratio` | `aspectRatios` |\n\n## Break\n\n### Break After\n\nUse the `breakAfter` prop to set how page, column, or region breaks should\nbehave after an element.\n\n```jsx\n<Box columns=\"2\">\n  <Box>Item 1</Box>\n  <Box breakAfter=\"page\">Item 2</Box>\n</Box>\n```\n\n| Prop         | CSS Property  | Token Category |\n| ------------ | ------------- | -------------- |\n| `breakAfter` | `break-after` | -              |\n\n### Break Before\n\nUse the `breakBefore` prop to set how page, column, or region breaks should\nbehave before an element.\n\n```jsx\n<Box columns=\"2\">\n  <Box>Item 1</Box>\n  <Box breakBefore=\"page\">Item 2</Box>\n</Box>\n```\n\n| Prop          | CSS Property   | Token Category |\n| ------------- | -------------- | -------------- |\n| `breakBefore` | `break-before` | -              |\n\n### Break Inside\n\nUse the `breakInside` prop to set how page, column, or region breaks should\nbehave inside an element.\n\n```jsx\n<Box columns=\"2\">\n  <Box>Item 1</Box>\n  <Box breakInside=\"avoid\">Item 2</Box>\n</Box>\n```\n\n| Prop          | CSS Property   | Token Category |\n| ------------- | -------------- | -------------- |\n| `breakInside` | `break-inside` | -              |\n\n## Box Decoration Break\n\nUse the `boxDecorationBreak` prop to set how box decorations should behave when\nthe box breaks across multiple lines, columns, or pages.\n\n```jsx /boxDecorationBreak/\n<Box bgImage=\"linear-gradient(red, blue)\" boxDecorationBreak=\"clone\">\n  Chakra is <br /> great!\n</Box>\n```\n\n| Prop                 | CSS Property           | Token Category |\n| -------------------- | ---------------------- | -------------- |\n| `boxDecorationBreak` | `box-decoration-break` | -              |\n\n## Box Sizing\n\nUse the `boxSizing` prop to set the box sizing of an element.\n\n```jsx /boxSizing/\n<Box boxSizing=\"border-box\" padding=\"4\" width=\"8\" height=\"8\" />\n```\n\n| Prop        | CSS Property | Token Category |\n| ----------- | ------------ | -------------- |\n| `boxSizing` | `box-sizing` | -              |\n\n## Columns\n\nUse the `columns` prop to set the number of columns for an element.\n\n```jsx\n<Box columns={2} />\n```\n\n| Prop      | CSS Property | Token Category |\n| --------- | ------------ | -------------- |\n| `columns` | `columns`    | -              |\n\n## Float\n\nUse the `float` prop to set the float of an element.\n\n```jsx /float/\n<Box>\n  <Text>As much mud in the streets...</Text>\n  <Box float=\"left\">Float me</Box>\n</Box>\n```\n\n| Prop    | CSS Property | Token Category |\n| ------- | ------------ | -------------- |\n| `float` | `float`      | -              |\n\n## Clear\n\nUse the `clear` prop to set whether an element must be moved below (cleared)\nfloating elements that precede it.\n\n```jsx\n<Box>\n  <Box float=\"left\">Left</Box>\n  <Box float=\"right\">Right</Box>\n  <Box clear=\"none\">\n    As much mud in the streets as if the waters had but newly retired from the\n    face of the earth, and it would not be wonderful to meet a Megalosaurus,\n    forty feet long or so, waddling like an elephantine lizard up Holborn Hill.\n  </Box>\n</Box>\n```\n\n| Prop    | CSS Property | Token Category |\n| ------- | ------------ | -------------- |\n| `clear` | `clear`      | -              |\n\n## Isolation\n\nUse the `isolation` prop to set whether an element should explicitly create a\nnew stacking context.\n\n```jsx\n<Box isolation=\"isolate\">\n  <Box bg=\"red.500\" width=\"10\" height=\"10\" />\n</Box>\n```\n\n| Prop        | CSS Property | Token Category |\n| ----------- | ------------ | -------------- |\n| `isolation` | `isolation`  | -              |\n\n## Object Fit\n\nUse the `objectFit` prop to set how an image or video should be resized to fit\nits container.\n\n```jsx\n<Image src=\"...\" objectFit=\"cover\" width=\"10\" height=\"10\" />\n```\n\n| Prop        | CSS Property | Token Category |\n| ----------- | ------------ | -------------- |\n| `objectFit` | `object-fit` | -              |\n\n## Object Position\n\nUse the `objectPosition` prop to set how an element should be positioned within\nits container.\n\n```jsx\n<Image src=\"...\" objectPosition=\"center\" width=\"10\" height=\"10\" />\n```\n\n| Prop             | CSS Property      | Token Category |\n| ---------------- | ----------------- | -------------- |\n| `objectPosition` | `object-position` | -              |\n\n## Overflow\n\nUse the `overflow` prop to control how content that exceeds an element's\ndimensions is handled. This property determines whether to clip the content, add\nscrollbars, or display the overflow content.\n\n```jsx\n<Box overflow=\"hidden\" maxHeight=\"120px\" />\n<Box overflow=\"auto\" maxHeight=\"120px\" />\n```\n\n| Prop       | CSS Property | Token Category |\n| ---------- | ------------ | -------------- |\n| `overflow` | `overflow`   | -              |\n\n## Overscroll Behavior\n\nUse the `overscrollBehavior` prop to control what the browser does when reaching\nthe boundary of a scrolling area.\n\n```jsx\n<Box maxHeight=\"120px\" overscrollBehavior=\"contain\" />\n```\n\n| Prop                 | CSS Property          | Token Category |\n| -------------------- | --------------------- | -------------- |\n| `overscrollBehavior` | `overscroll-behavior` | -              |\n\n## Position\n\nUse the `position` utilities to set the position of an element.\n\n```jsx\n<Box position=\"absolute\" />\n<Box pos=\"absolute\" /> // shorthand\n```\n\n| Prop       | CSS Property | Token Category |\n| ---------- | ------------ | -------------- |\n| `position` | `position`   | -              |\n\n## Top / Right / Bottom / Left\n\nUse the `top`, `right`, `bottom` and `left` utilities to set the position of an\nelement.\n\n```jsx\n<Box position=\"absolute\" top=\"0\" left=\"0\" />\n\n// using spacing tokens\n<Box position=\"absolute\" top=\"4\" />\n\n// using hardcoded values\n<Box position=\"absolute\" top=\"100px\" />\n```\n\nUse the logical equivalents of `inset{Start|End}` utilities to set the position\nof an element based on the writing mode.\n\n```jsx\n<Box position=\"absolute\" insetStart=\"0\" />\n```\n\n| Prop                                      | CSS Property         | Token Category |\n| ----------------------------------------- | -------------------- | -------------- |\n| `top`                                     | `top`                | `spacing`      |\n| `right`                                   | `right`              | `spacing`      |\n| `bottom`                                  | `bottom`             | `spacing`      |\n| `left`                                    | `left`               | `spacing`      |\n| `start`, `insetStart`, `insetInlineStart` | `inset-inline-start` | `spacing`      |\n| `end` , `insetEnd`, `insetInlineEnd`      | `inset-inline-end`   | `spacing`      |\n| `insetX`, `insetInline`                   | `inset-inline`       | `spacing`      |\n| `insetY`, `insetBlock`                    | `inset-inline`       | `spacing`      |\n\n## Visibility\n\nUse the `visibility` prop to control the visibility of an element.\n\n```jsx\n<Box visibility=\"hidden\" />\n```\n\n| Prop         | CSS Property | Token Category |\n| ------------ | ------------ | -------------- |\n| `visibility` | `visibility` | -              |\n\n## Z-Index\n\nUse the `zIndex` prop to set the z-index of an element.\n\n```jsx\n// using hardcoded values\n<Box zIndex=\"1\" />\n\n// using token\n<Box zIndex=\"overlay\" />\n```\n\n| Prop     | CSS Property | Token Category |\n| -------- | ------------ | -------------- |\n| `zIndex` | `z-index`    | `zIndices`     |\n"
  },
  "packages/bleh-ui/src/docs/list.mdx": {
    "meta": {
      "id": "Style Props-List",
      "title": "List",
      "description": "JSX style props for customizing list styles.",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/src/docs/list.mdx",
      "menu": [
        "Style Props",
        "List"
      ],
      "route": "style-props/list",
      "tags": [
        "document"
      ],
      "toc": [
        {
          "value": "List Style Type",
          "href": "#list-style-type",
          "depth": 2,
          "numbering": [
            1,
            1
          ],
          "parent": "root"
        },
        {
          "value": "List Style Position",
          "href": "#list-style-position",
          "depth": 2,
          "numbering": [
            1,
            2
          ],
          "parent": "root"
        },
        {
          "value": "List Style Image",
          "href": "#list-style-image",
          "depth": 2,
          "numbering": [
            1,
            3
          ],
          "parent": "root"
        },
        {
          "value": "Markers",
          "href": "#markers",
          "depth": 2,
          "numbering": [
            1,
            4
          ],
          "parent": "root"
        }
      ]
    },
    "mdx": "\n# List\n\nJSX style props for customizing list styles.\n\n## List Style Type\n\nUse the `listStyleType` property to set the type of the list marker.\n\n```jsx\n<Box as=\"ul\" listStyleType=\"circle\">\n  <li>Item 1</li>\n  <li>Item 2</li>\n  <li>Item 3</li>\n</Box>\n```\n\n| Prop            | CSS Property      | Token Category |\n| --------------- | ----------------- | -------------- |\n| `listStyleType` | `list-style-type` | -              |\n\n## List Style Position\n\nUse the `listStylePosition` property to set the position of the list marker.\n\n```jsx\n<Box as=\"ul\" listStylePosition=\"inside\">\n  <li>Item 1</li>\n  <li>Item 2</li>\n  <li>Item 3</li>\n</Box>\n```\n\n| Prop                | CSS Property          | Token Category |\n| ------------------- | --------------------- | -------------- |\n| `listStylePosition` | `list-style-position` | -              |\n\n## List Style Image\n\nUse the `listStyleImage` property to set the image of the list marker.\n\n```jsx\n<Box as=\"ul\" listStyleImage=\"url(...)\">\n  <li>Item 1</li>\n  <li>Item 2</li>\n  <li>Item 3</li>\n</Box>\n```\n\n| Prop             | CSS Property       | Token Category |\n| ---------------- | ------------------ | -------------- |\n| `listStyleImage` | `list-style-image` | `assets`       |\n\n## Markers\n\nUse the `_marker` property to set the marker of a list item.\n\n```jsx /_marker/\n<ul>\n  <Box as=\"li\" _marker={{ color: \"red\" }}>\n    Item 1\n  </Box>\n  <Box as=\"li\" _marker={{ color: \"blue\" }}>\n    Item 2\n  </Box>\n  <Box as=\"li\" _marker={{ color: \"green\" }}>\n    Item 3\n  </Box>\n</ul>\n```\n"
  },
  "packages/bleh-ui/src/docs/markdown.mdx": {
    "meta": {
      "id": "Markdown",
      "title": "Markdown",
      "description": "a page with many mdx & markdown features",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/src/docs/markdown.mdx",
      "menu": [
        "Playground",
        "Markdown"
      ],
      "route": "playground/markdown",
      "tags": [
        "playground",
        "markdown",
        "mdx"
      ],
      "toc": [
        {
          "value": "Basic Markdown",
          "href": "#basic-markdown",
          "depth": 2,
          "numbering": [
            1,
            1
          ],
          "parent": "root"
        },
        {
          "value": "Headings",
          "href": "#headings",
          "depth": 3,
          "numbering": [
            1,
            1,
            1
          ],
          "parent": "root"
        },
        {
          "value": "Emphasizing Text",
          "href": "#emphasizing-text",
          "depth": 3,
          "numbering": [
            1,
            1,
            2
          ],
          "parent": "root"
        },
        {
          "value": "Italic Text",
          "href": "#italic-text",
          "depth": 4,
          "numbering": [
            1,
            1,
            2,
            1
          ],
          "parent": "root"
        },
        {
          "value": "Bold Text",
          "href": "#bold-text",
          "depth": 4,
          "numbering": [
            1,
            1,
            2,
            2
          ],
          "parent": "root"
        },
        {
          "value": "Bold + Italic Text",
          "href": "#bold--italic-text",
          "depth": 4,
          "numbering": [
            1,
            1,
            2,
            3
          ],
          "parent": "root"
        },
        {
          "value": "Code",
          "href": "#code",
          "depth": 3,
          "numbering": [
            1,
            1,
            3
          ],
          "parent": "root"
        },
        {
          "value": "Blockquote",
          "href": "#blockquote",
          "depth": 3,
          "numbering": [
            1,
            1,
            4
          ],
          "parent": "root"
        },
        {
          "value": "Links",
          "href": "#links",
          "depth": 3,
          "numbering": [
            1,
            1,
            5
          ],
          "parent": "root"
        },
        {
          "value": "Images",
          "href": "#images",
          "depth": 3,
          "numbering": [
            1,
            1,
            6
          ],
          "parent": "root"
        },
        {
          "value": "Lists",
          "href": "#lists",
          "depth": 3,
          "numbering": [
            1,
            1,
            7
          ],
          "parent": "root"
        },
        {
          "value": "Ordered List",
          "href": "#ordered-list",
          "depth": 4,
          "numbering": [
            1,
            1,
            7,
            1
          ],
          "parent": "root"
        },
        {
          "value": "Unordered Lists",
          "href": "#unordered-lists",
          "depth": 4,
          "numbering": [
            1,
            1,
            7,
            2
          ],
          "parent": "root"
        },
        {
          "value": "Github flavored Markdown",
          "href": "#github-flavored-markdown",
          "depth": 2,
          "numbering": [
            1,
            2
          ],
          "parent": "root"
        },
        {
          "value": "Tables",
          "href": "#tables",
          "depth": 3,
          "numbering": [
            1,
            2,
            1
          ],
          "parent": "root"
        },
        {
          "value": "Footnotes",
          "href": "#footnotes",
          "depth": 3,
          "numbering": [
            1,
            2,
            2
          ],
          "parent": "root"
        },
        {
          "value": "Strikethrough",
          "href": "#strikethrough",
          "depth": 3,
          "numbering": [
            1,
            2,
            3
          ],
          "parent": "root"
        },
        {
          "value": "Tasklist",
          "href": "#tasklist",
          "depth": 3,
          "numbering": [
            1,
            2,
            4
          ],
          "parent": "root"
        },
        {
          "value": "Highlighted blockquotes",
          "href": "#highlighted-blockquotes",
          "depth": 3,
          "numbering": [
            1,
            2,
            5
          ],
          "parent": "root"
        },
        {
          "value": "Blockquotes",
          "href": "#blockquotes",
          "depth": 2,
          "numbering": [
            1,
            3
          ],
          "parent": "root"
        },
        {
          "value": "Simple case",
          "href": "#simple-case",
          "depth": 3,
          "numbering": [
            1,
            3,
            1
          ],
          "parent": "root"
        },
        {
          "value": "With cite",
          "href": "#with-cite",
          "depth": 3,
          "numbering": [
            1,
            3,
            2
          ],
          "parent": "root"
        },
        {
          "value": "Two paragraphs in a blockquote",
          "href": "#two-paragraphs-in-a-blockquote",
          "depth": 3,
          "numbering": [
            1,
            3,
            3
          ],
          "parent": "root"
        },
        {
          "value": "Nested blockquote",
          "href": "#nested-blockquote",
          "depth": 3,
          "numbering": [
            1,
            3,
            4
          ],
          "parent": "root"
        },
        {
          "value": "Blockquotes with Other Elements",
          "href": "#blockquotes-with-other-elements",
          "depth": 3,
          "numbering": [
            1,
            3,
            5
          ],
          "parent": "root"
        },
        {
          "value": "The quarterly results look great!",
          "href": "#the-quarterly-results-look-great",
          "depth": 4,
          "numbering": [
            1,
            3,
            5,
            1
          ],
          "parent": "blockquote"
        },
        {
          "value": "Keyboard Combinations",
          "href": "#keyboard-combinations",
          "depth": 3,
          "numbering": [
            1,
            3,
            6
          ],
          "parent": "root"
        }
      ]
    },
    "mdx": "\n# Markdown / MDX Stress Test\n\nThis is a page to stress test markdown & mdx syntax usages to see if everything\nrenders without issues.\n\n## Basic Markdown\n\nBAsic markdown is supported.\n\n### Headings\n\nSee the bold Text above? This is a heading. Not gonna demonstrate them, they are\nused everwhere on a page, but this is what you'd use in markdown or mdx files to\nwrite one:\n\n```markdown\n# H1 Most important\n\n## H2 Heading\n\n### H3 Heading\n\n#### H4 Heading\n\n##### H5 Heading\n\n###### H6 Least important\n```\n\n### Emphasizing Text\n\n#### Italic Text\n\n_Italic text_ is done with underscores `_String to highlight_`\n\n#### Bold Text\n\n**Bold text** is done with double asterisks `**String to highlight**`\n\n#### Bold + Italic Text\n\n**_Bold + Italic text_** is done with tripple asterisks\n`***String to highlight***`\n\n### Code\n\nCode can be displayed inline or in a code-block, use single backticks for\ninline-code or tripple backticks for code blocks.\n\nLook at this: `export const App = () => <div>App</div>` this was inline code.\n\nAnd here is a code-block:\n\n```jsx\nexport const App = () => {\n  return (\n    <div>\n      <p>App</p>\n    </div>\n  );\n};\n```\n\n### Blockquote\n\nThis is how a regular blockquote looks. There are more variants of blockquotes\nbut they are belonging to the Github flavored Markdown though.\n\n> Sugar plum shortbread dragée chocolate bar lollipop. Bonbon soufflé cupcake\n> cotton candy bear claw muffin tiramisu\n\n### Links\n\nLink look pretty basic [tiramisu croissant gummies](http://www.asdasdsd.com)\n\n### Images\n\nImages work as well.\n\n```markdown\n![alt text](https://picsum.photos/seed/2/640/480 \"Image title\")\n```\n\n![alt text](https://picsum.photos/seed/2/640/480 \"Random office pic\")\n\n### Lists\n\n#### Ordered List\n\nSimple list:\n\n1. First item\n2. Second item\n3. Third item\n4. Fourth item\n\n---\n\n1. First item\n2. Second item\n3. Third item\n   1. Indented item\n   2. Indented item\n4. Fourth item\n\n---\n\n#### Unordered Lists\n\nSimple list:\n\n- First item\n- Second item\n- Third item\n- Fourth item\n\nList with a sublist:\n\n- First item\n- Second item\n- Third item\n  - Indented item\n  - Indented item\n- Fourth item\n\n## Github flavored Markdown\n\n### Tables\n\n| **Product Name**                  | **Category**     | **Price** | **Discount** | **Stock** | **Ratings**     | **Brand**  | **Color**   | **Shipping**      | **In Stock** |\n| --------------------------------- | ---------------- | --------- | ------------ | --------- | --------------- | ---------- | ----------- | ----------------- | ------------ |\n| **Wireless Bluetooth Headphones** | Electronics      | $79.99    | 10% off      | 124       | ⭐⭐⭐⭐☆ (4.5) | SoundWave  | Black       | Free Shipping     | Yes          |\n| **Leather Sofa Set**              | Furniture        | $999.00   | 15% off      | 15        | ⭐⭐⭐⭐⭐ (5)  | HomeLux    | Brown       | Free Shipping     | No           |\n| **Smartphone 6 Pro**              | Electronics      | $699.00   | 5% off       | 57        | ⭐⭐⭐⭐⭐ (5)  | TechSmart  | Blue        | Free Shipping     | Yes          |\n| **Gaming Laptop 15\"**             | Electronics      | $1,499.00 | 20% off      | 32        | ⭐⭐⭐⭐☆ (4.2) | GamerX     | Gray        | Free Shipping     | Yes          |\n| **Organic Green Tea**             | Food & Beverages | $15.99    | No Discount  | 302       | ⭐⭐⭐⭐☆ (4.4) | PureLeaf   | Green       | Standard Shipping | Yes          |\n| **Men’s Running Shoes**           | Apparel          | $79.99    | 30% off      | 85        | ⭐⭐⭐⭐☆ (4.6) | FitStep    | Red         | Free Shipping     | Yes          |\n| **Stainless Steel Watch**         | Accessories      | $249.00   | 10% off      | 67        | ⭐⭐⭐⭐⭐ (5)  | TimeMaster | Silver      | Free Shipping     | No           |\n| **Coffee Maker 12 Cup**           | Kitchen          | $89.99    | No Discount  | 121       | ⭐⭐⭐⭐⭐ (5)  | BrewMaster | Black       | Standard Shipping | Yes          |\n| **Children’s Toy Set**            | Toys & Games     | $24.99    | 15% off      | 205       | ⭐⭐⭐⭐☆ (4.3) | FunTime    | Multi-color | Free Shipping     | Yes          |\n\n### Footnotes\n\n- Super cheap, buy now [^1]\n\n[^1]: It's actually expensive.\n\n### Strikethrough\n\n~one~ or ~~two~~ tildes.\n\n### Tasklist\n\n- [ ] to do\n- [x] done\n\n### Highlighted blockquotes\n\n> [!NOTE]  \n> Highlights information that users should take into account, even when\n> skimming.\n\n> [!IMPORTANT]  \n> Crucial information necessary for users to succeed.\n\n> [!WARNING]  \n> Critical content demanding immediate user attention due to potential risks.\n\n> [!CAUTION]  \n> Negative potential consequences of an action.\n\n> [!TIP]  \n> Optional information to help a user be more successful. Maybe with more text\n\n## Blockquotes\n\n### Simple case\n\n> Sugar plum shortbread dragée chocolate bar lollipop. Bonbon soufflé cupcake\n> cotton candy bear claw muffin tiramisu chocolate cake icing. Cake marshmallow\n> tart pastry caramels tootsie roll. Gummi bears liquorice tiramisu toffee tart.\n\n### With cite\n\n> Sugar plum shortbread dragée chocolate bar lollipop. Bonbon soufflé cupcake\n> cotton candy bear claw muffin tiramisu chocolate cake icing. Cake marshmallow\n> tart pastry caramels tootsie roll. Gummi bears liquorice tiramisu toffee tart.\n>\n> - Dorothy from wizard of oz\n\n### Two paragraphs in a blockquote\n\n> Dorothy followed her through many of the beautiful rooms in her castle.\n>\n> The Witch bade her clean the pots and kettles and sweep the floor and keep the\n> fire fed with wood.\n\n### Nested blockquote\n\n> Dorothy followed her through many of the beautiful rooms in her castle.\n>\n> > The Witch bade her clean the pots and kettles and sweep the floor and keep\n> > the fire fed with wood.\n\n### Blockquotes with Other Elements\n\n> #### The quarterly results look great!\n>\n> - Revenue was off the chart.\n> - Profits were higher than ever.\n>\n> ---\n>\n> Kinda fancy looking, right?\n\n### Keyboard Combinations\n\nTo enable fruitcake mode, press <kbd>Ctrl</kbd> + <kbd>Alt</kbd> +\n<kbd>Space</kbd>.\n"
  },
  "packages/bleh-ui/src/docs/media.mdx": {
    "meta": {
      "id": "Media",
      "title": "Media",
      "description": "Components for displaying media content.",
      "documentState": "InitialDraft",
      "order": 3,
      "repoPath": "packages/bleh-ui/src/docs/media.mdx",
      "menu": [
        "Components",
        "Media"
      ],
      "route": "components/media",
      "tags": [
        "media"
      ],
      "toc": [],
      "icon": "Images"
    },
    "mdx": "\n# Media\n\nComponents for displaying media content.\n\n- **Images**: e.g., Avatar, Image, Carousel.\n- **Videos**: e.g., VideoPlayer, VideoThumbnail.\n- **Icons**: e.g., Icon, IconButton.\n- **Audio**: e.g., AudioPlayer.\n"
  },
  "packages/bleh-ui/src/docs/naivgation.mdx": {
    "meta": {
      "id": "Components-Naivgation",
      "title": "Navigation",
      "description": "Components for moving through an application.",
      "documentState": "InitialDraft",
      "order": 2,
      "repoPath": "packages/bleh-ui/src/docs/naivgation.mdx",
      "menu": [
        "Components",
        "Navigation"
      ],
      "route": "components/navigation",
      "tags": [
        "document"
      ],
      "toc": [],
      "icon": "TableOfContents"
    },
    "mdx": "\n# Navigation\n\nComponents for moving through an application.\n\n- **Menus**: e.g., Dropdown, ContextMenu.\n- **Navigation Bars**: e.g., Navbar, Sidebar, Breadcrumbs.\n- **Tabs & Accordions**: e.g., TabPanel, Accordion.\n- **Pagination**: e.g., Paginator, InfiniteScroller.\n"
  },
  "packages/bleh-ui/src/docs/playground.mdx": {
    "meta": {
      "id": "Playground",
      "title": "Playground",
      "description": "collection of pages with an explorative character",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/src/docs/playground.mdx",
      "menu": [
        "Playground"
      ],
      "route": "playground",
      "tags": [
        "playground",
        "exploring"
      ],
      "toc": []
    },
    "mdx": "\n# Playground\n\nThis is the place to try out things.\n"
  },
  "packages/bleh-ui/src/docs/rfcs-component-structure-rfcs.mdx": {
    "meta": {
      "id": "Component Structure-RFCs",
      "title": "RFCs",
      "description": "Requests for feedback",
      "documentState": "InitialDraft",
      "documentAudiences": [
        "Maintainer"
      ],
      "order": 1.5,
      "repoPath": "packages/bleh-ui/src/docs/rfcs-component-structure-rfcs.mdx",
      "menu": [
        "RFCs"
      ],
      "route": "rfcs",
      "tags": [
        "document"
      ],
      "toc": []
    },
    "mdx": "\n# RFCs\n\nRequests for comments. Just create a document and work on it.\n"
  },
  "packages/bleh-ui/src/docs/rfcs-component-structure.mdx": {
    "meta": {
      "id": "WIP-Component Structure",
      "title": "Component Structure",
      "description": "Working out the process from idea to published component",
      "documentState": "InitialDraft",
      "documentAudiences": [
        "Maintainer"
      ],
      "order": 999,
      "repoPath": "packages/bleh-ui/src/docs/rfcs-component-structure.mdx",
      "menu": [
        "RFCs",
        "Component Structure"
      ],
      "route": "rfcs/component-structure",
      "tags": [
        "document"
      ],
      "toc": [
        {
          "value": "Basic Structure",
          "href": "#basic-structure",
          "depth": 2,
          "numbering": [
            1,
            1
          ],
          "parent": "root"
        },
        {
          "value": "component-name.types.ts",
          "href": "#component-nametypests",
          "depth": 3,
          "numbering": [
            1,
            1,
            1
          ],
          "parent": "root"
        },
        {
          "value": "component-name.recipe.ts",
          "href": "#component-namerecipets",
          "depth": 3,
          "numbering": [
            1,
            1,
            2
          ],
          "parent": "root"
        },
        {
          "value": "component-name.slots.ts",
          "href": "#component-nameslotsts",
          "depth": 3,
          "numbering": [
            1,
            1,
            3
          ],
          "parent": "root"
        },
        {
          "value": "component-name.tsx",
          "href": "#component-nametsx",
          "depth": 3,
          "numbering": [
            1,
            1,
            4
          ],
          "parent": "root"
        },
        {
          "value": "component-name.mdx",
          "href": "#component-namemdx",
          "depth": 3,
          "numbering": [
            1,
            1,
            5
          ],
          "parent": "root"
        },
        {
          "value": "index.ts",
          "href": "#indexts",
          "depth": 3,
          "numbering": [
            1,
            1,
            6
          ],
          "parent": "root"
        },
        {
          "value": "components",
          "href": "#components",
          "depth": 3,
          "numbering": [
            1,
            1,
            7
          ],
          "parent": "root"
        },
        {
          "value": "tests",
          "href": "#tests",
          "depth": 3,
          "numbering": [
            1,
            1,
            8
          ],
          "parent": "root"
        },
        {
          "value": "stories",
          "href": "#stories",
          "depth": 3,
          "numbering": [
            1,
            1,
            9
          ],
          "parent": "root"
        }
      ]
    },
    "mdx": "\n# React Component Anatomy\n\n## Basic Structure\n\n```bash\n/components\n  /component-name\n    │ # Files\n    ├── component-name.types.ts      # typescript type exports\n    ├── component-name.recipe.ts     # a recipe file covering basic styles, sizes & variants\n    ├── component-name.slots.tsx     # optional, for multi-part components\n    ├── component-name.figma.tsx     # code to figma export instructions/definition\n    ├── component-name.tsx           # component implementation\n    ├── component-name.mdx           # component documentation\n    ├── index.ts                     # barrel file for exports\n    │ # Folders\n    ├── hooks                        # optional, folder for react hooks\n    ├── components                   # optional, folder for sub-components\n    ├── tests                        # unit tests\n    ├── stories                      # storybook stories (screenshot tests)\n```\n\n### component-name.types.ts\n\nExports and/or contains the type definitions for the component.\n\n### component-name.recipe.ts\n\nContains a single or multi-slot recipe. Covering default styles, sizes, variants\nand compound variants for a single or multiple _slots_.\n\n### component-name.slots.ts\n\nA component that has multiple parts, like a Modal (header, body, footer, etc.),\nwill have a .slot.tsx file. This file will create components with styles\nattached to them, and will be used in the main component file.\n\n### component-name.tsx\n\nFree of any styling concerns, this file imports the slot-components and connects\nthose with the headless ui-components.\n\n### component-name.mdx\n\nContains the documentation for the component. Will provide examples, usage,\nprops, etc.\n\n### index.ts\n\nExports the component and any other files that need to be exported.\n\n### components\n\nOptional, can contain components that are only used by the parent component.\nStructure is the same basic folder structure.\n\n### tests\n\n### stories\n"
  },
  "packages/bleh-ui/src/docs/rfcs-hook-structure.mdx": {
    "meta": {
      "id": "Organisation-Hook Structure",
      "title": "Hook Structure",
      "description": "Basic structure of a react hook",
      "documentState": "InitialDraft",
      "documentAudiences": [
        "Maintainer"
      ],
      "order": 999,
      "repoPath": "packages/bleh-ui/src/docs/rfcs-hook-structure.mdx",
      "menu": [
        "RFCs",
        "Hook Structure"
      ],
      "route": "rfcs/hook-structure",
      "tags": [
        "document"
      ],
      "toc": [
        {
          "value": "Basic Structure",
          "href": "#basic-structure",
          "depth": 2,
          "numbering": [
            1,
            1
          ],
          "parent": "root"
        },
        {
          "value": "useHookName.types.ts",
          "href": "#usehooknametypests",
          "depth": 3,
          "numbering": [
            1,
            1,
            1
          ],
          "parent": "root"
        },
        {
          "value": "useHookName.ts",
          "href": "#usehooknamets",
          "depth": 3,
          "numbering": [
            1,
            1,
            2
          ],
          "parent": "root"
        },
        {
          "value": "useHookName.utils.ts",
          "href": "#usehooknameutilsts",
          "depth": 3,
          "numbering": [
            1,
            1,
            3
          ],
          "parent": "root"
        },
        {
          "value": "useHookName.test.ts",
          "href": "#usehooknametestts",
          "depth": 3,
          "numbering": [
            1,
            1,
            4
          ],
          "parent": "root"
        },
        {
          "value": "useHookName.mdx",
          "href": "#usehooknamemdx",
          "depth": 3,
          "numbering": [
            1,
            1,
            5
          ],
          "parent": "root"
        },
        {
          "value": "index.ts",
          "href": "#indexts",
          "depth": 3,
          "numbering": [
            1,
            1,
            6
          ],
          "parent": "root"
        }
      ]
    },
    "mdx": "\n# React Hook Anatomy\n\n## Basic Structure\n\n```bash\n/hooks\n  /use-hook-name\n    │ # Files\n    ├── use-hook-name.types.ts        # typescript type exports\n    ├── use-hook-name.ts              # hook implementation\n    ├── use-hook-name.utils.ts        # optional, utility functions for the hook\n    ├── use-hook-name.test.ts         # unit tests for the hook\n    ├── use-hook-name.mdx             # documentation for the hook\n    ├── index.ts                      # barrel file for exports\n```\n\n### useHookName.types.ts\n\nContains type definitions relevant to the hook, such as inputs, outputs, and\ncustom types it uses.\n\n### useHookName.ts\n\nThe core implementation of the hook. It defines and exports the hook's logic and\nany dependencies it might require.\n\n### useHookName.utils.ts\n\nOptional file containing reusable utility functions that support the hook's\nimplementation.\n\n### useHookName.test.ts\n\nContains unit tests for the hook to ensure its functionality and edge cases are\ncovered.\n\n### useHookName.mdx\n\nDocumentation file for the hook, detailing its purpose, usage, and examples.\n\n### index.ts\n\nExports the hook and any other files (e.g., utilities or types) that should be\npublicly accessible.\n"
  },
  "packages/bleh-ui/src/docs/sizing.mdx": {
    "meta": {
      "id": "Style Props-Sizing",
      "title": "Sizing",
      "description": "JSX style props for sizing an element",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/src/docs/sizing.mdx",
      "menu": [
        "Style Props",
        "Sizing"
      ],
      "route": "style-props/sizing",
      "tags": [
        "document"
      ],
      "toc": [
        {
          "value": "Width",
          "href": "#width",
          "depth": 2,
          "numbering": [
            1,
            1
          ],
          "parent": "root"
        },
        {
          "value": "Fractional width",
          "href": "#fractional-width",
          "depth": 3,
          "numbering": [
            1,
            1,
            1
          ],
          "parent": "root"
        },
        {
          "value": "Viewport width",
          "href": "#viewport-width",
          "depth": 3,
          "numbering": [
            1,
            1,
            2
          ],
          "parent": "root"
        },
        {
          "value": "Max width",
          "href": "#max-width",
          "depth": 2,
          "numbering": [
            1,
            2
          ],
          "parent": "root"
        },
        {
          "value": "Min width",
          "href": "#min-width",
          "depth": 2,
          "numbering": [
            1,
            3
          ],
          "parent": "root"
        },
        {
          "value": "Height",
          "href": "#height",
          "depth": 2,
          "numbering": [
            1,
            4
          ],
          "parent": "root"
        },
        {
          "value": "Fractional height",
          "href": "#fractional-height",
          "depth": 3,
          "numbering": [
            1,
            4,
            1
          ],
          "parent": "root"
        },
        {
          "value": "Relative heights",
          "href": "#relative-heights",
          "depth": 3,
          "numbering": [
            1,
            4,
            2
          ],
          "parent": "root"
        },
        {
          "value": "Max height",
          "href": "#max-height",
          "depth": 2,
          "numbering": [
            1,
            5
          ],
          "parent": "root"
        },
        {
          "value": "Min height",
          "href": "#min-height",
          "depth": 2,
          "numbering": [
            1,
            6
          ],
          "parent": "root"
        }
      ]
    },
    "mdx": "\n# Sizing\n\nJSX style props for sizing an element\n\n## Width\n\nUse the `width` or `w` property to set the width of an element.\n\n```jsx\n// hardcoded values\n<Box width=\"64px\" />\n<Box w=\"4rem\" />\n\n// token values\n<Box width=\"5\" />\n<Box w=\"5\" />\n```\n\n### Fractional width\n\nUse can set fractional widths using the `width` or `w` property.\n\nValues can be within the following ranges:\n\n- Thirds: `1/3` to `2/3`\n- Fourths: `1/4` to `3/4`\n- Fifths: `1/5` to `4/5`\n- Sixths: `1/6` to `5/6`\n- Twelfths: `1/12` to `11/12`\n\n```jsx\n// half width\n<Flex>\n  <Box width=\"1/2\" />\n  <Box width=\"1/2\" />\n</Flex>\n\n// thirds\n<Flex>\n  <Box width=\"1/3\" />\n  <Box width=\"2/3\" />\n</Flex>\n\n// fourths\n<Flex>\n  <Box width=\"1/4\" />\n  <Box width=\"3/4\" />\n</Flex>\n\n// fifths\n<Flex>\n  <Box width=\"1/5\" />\n  <Box width=\"4/5\" />\n</Flex>\n\n// sixths\n<Flex>\n  <Box width=\"1/6\" />\n  <Box width=\"5/6\" />\n</Flex>\n\n// twelfths\n<Flex>\n  <Box width=\"3/12\" />\n  <Box width=\"9/12\" />\n</Flex>\n```\n\n### Viewport width\n\nUse the modern viewport width values `dvw`, `svw`, `lvw`.\n\n> [!NOTE]  \n> `dvw` maps to `100dvw`, `svw` maps to `100svw`, `lvw` maps to `100lvw`.\n\n```jsx\n<Box width=\"dvw\" />\n<Box w=\"dvw\" /> // shorthand\n```\n\n| Prop         | CSS Property | Token Category |\n| ------------ | ------------ | -------------- |\n| `w`, `width` | `width`      | `sizes`        |\n\n## Max width\n\nUse the `maxWidth` or `maxW` property to set the maximum width of an element.\n\n```jsx\n// hardcoded values\n<Box maxWidth=\"640px\" />\n<Box maxW=\"4rem\" /> // shorthand\n\n// token values\n<Box maxWidth=\"xl\" />\n<Box maxW=\"2xl\" /> // shorthand\n```\n\n| Prop               | CSS Property | Token Category |\n| ------------------ | ------------ | -------------- |\n| `maxW`, `maxWidth` | `max-width`  | `sizes`        |\n\n## Min width\n\nUse the `minWidth` or `minW` property to set the minimum width of an element.\n\n```jsx\n// hardcoded values\n<Box minWidth=\"64px\" />\n<Box minW=\"4rem\" /> // shorthand\n\n// token values\n<Box minWidth=\"8\" />\n<Box minW=\"10\" /> // shorthand\n```\n\n| Prop               | CSS Property | Token Category |\n| ------------------ | ------------ | -------------- |\n| `w`, `width`       | `width`      | `sizing`       |\n| `maxW`, `maxWidth` | `max-width`  | `sizing`       |\n| `minW`, `minWidth` | `min-width`  | `sizing`       |\n\n## Height\n\nUse the `height` or `h` property to set the height of an element.\n\n```jsx\n// hardcoded values\n<Box height=\"40px\" />\n<Box h=\"0.4rem\" /> // shorthand\n\n// token values\n<Box height=\"5\" />\n<Box h=\"5\" /> // shorthand\n```\n\n### Fractional height\n\nUse can set fractional heights using the `height` or `h` property.\n\nValues can be within the following ranges:\n\n- Thirds: `1/3` to `2/3`\n- Fourths: `1/4` to `3/4`\n- Fifths: `1/5` to `4/5`\n- Sixths: `1/6` to `5/6`\n\n```jsx\n<Box height=\"1/2\" />\n<Box h=\"1/2\" /> // shorthand\n```\n\n### Relative heights\n\nUse the modern relative height values `dvh`, `svh`, `lvh`.\n\n> [!NOTE]  \n> `dvh` maps to `100dvh`, `svh` maps to `100svh`, `lvh` maps to `100lvh`.\n\n```jsx\n<Box height=\"dvh\" />\n<Box h=\"dvh\" /> // shorthand\n```\n\n## Max height\n\nUse the `maxHeight` or `maxH` property to set the maximum height of an element.\n\n```jsx\n// hardcoded values\n<Box maxHeight=\"40px\" />\n<Box maxH=\"0.4rem\" /> // shorthand\n\n// token values\n<Box maxHeight=\"8\" />\n<Box maxH=\"10\" /> // shorthand\n```\n\n## Min height\n\nUse the `minHeight` or `minH` property to set the minimum height of an element.\n\n```jsx\n// hardcoded values\n<Box minHeight=\"40px\" />\n<Box minH=\"0.4rem\" /> // shorthand\n\n// token values\n<Box minHeight=\"8\" />\n<Box minH=\"10\" /> // shorthand\n```\n\n| Prop                | CSS Property | Token Category |\n| ------------------- | ------------ | -------------- |\n| `h`, `height`       | `height`     | `sizes`        |\n| `maxH`, `maxHeight` | `max-height` | `sizes`        |\n| `minH`, `minHeight` | `min-height` | `sizes`        |\n"
  },
  "packages/bleh-ui/src/docs/spacing.mdx": {
    "meta": {
      "id": "Style Props-Spacing",
      "title": "Spacing",
      "description": "JSX style props for controlling the padding and margin of an element.",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/src/docs/spacing.mdx",
      "menu": [
        "Style Props",
        "Spacing"
      ],
      "route": "style-props/spacing",
      "tags": [
        "document"
      ],
      "toc": [
        {
          "value": "Padding",
          "href": "#padding",
          "depth": 2,
          "numbering": [
            1,
            1
          ],
          "parent": "root"
        },
        {
          "value": "All sides",
          "href": "#all-sides",
          "depth": 3,
          "numbering": [
            1,
            1,
            1
          ],
          "parent": "root"
        },
        {
          "value": "Specific side",
          "href": "#specific-side",
          "depth": 3,
          "numbering": [
            1,
            1,
            2
          ],
          "parent": "root"
        },
        {
          "value": "Horizontal and Vertical padding",
          "href": "#horizontal-and-vertical-padding",
          "depth": 3,
          "numbering": [
            1,
            1,
            3
          ],
          "parent": "root"
        },
        {
          "value": "Margin",
          "href": "#margin",
          "depth": 2,
          "numbering": [
            1,
            2
          ],
          "parent": "root"
        },
        {
          "value": "All sides",
          "href": "#all-sides-1",
          "depth": 3,
          "numbering": [
            1,
            2,
            1
          ],
          "parent": "root"
        },
        {
          "value": "Specific side",
          "href": "#specific-side-1",
          "depth": 3,
          "numbering": [
            1,
            2,
            2
          ],
          "parent": "root"
        },
        {
          "value": "Horizontal and Vertical margin",
          "href": "#horizontal-and-vertical-margin",
          "depth": 3,
          "numbering": [
            1,
            2,
            3
          ],
          "parent": "root"
        },
        {
          "value": "Spacing Between",
          "href": "#spacing-between",
          "depth": 2,
          "numbering": [
            1,
            3
          ],
          "parent": "root"
        }
      ]
    },
    "mdx": "\n# Spacing\n\nJSX style props for controlling the padding and margin of an element.\n\n## Padding\n\n### All sides\n\nUse the `padding` prop to apply padding on all sides of an element\n\n```jsx\n// raw value\n<Box padding=\"40px\" />\n<Box p=\"40px\" /> // shorthand\n\n// token value\n<Box padding=\"4\" />\n<Box p=\"4\" /> // shorthand\n```\n\n| Prop          | CSS Property | Token Category |\n| ------------- | ------------ | -------------- |\n| `p`,`padding` | `padding`    | `spacing`      |\n\n### Specific side\n\nUse the `padding{Left,Right,Top,Bottom}` to apply padding on one side of an\nelement\n\n```jsx\n<Box paddingLeft=\"3\" />\n<Box pl=\"3\" /> // shorthand\n\n<Box paddingTop=\"3\" />\n<Box pt=\"3\" /> // shorthand\n```\n\nUse the `padding{Start,End}` props to apply padding on the logical axis of an\nelement based on the text direction.\n\n```jsx\n<div className={css({ paddingStart: '8' })} />\n<div className={css({ ps: '8' })} /> // shorthand\n\n<div className={css({ paddingEnd: '8' })} />\n<div className={css({ pe: '8' })} /> // shorthand\n```\n\n| Prop                  | CSS Property           | Token Category |\n| --------------------- | ---------------------- | -------------- |\n| `pl`, `paddingLeft`   | `padding-left`         | `spacing`      |\n| `pr`, `paddingRight`  | `padding-right`        | `spacing`      |\n| `pt`, `paddingTop`    | `padding-top`          | `spacing`      |\n| `pb`, `paddingBottom` | `padding-bottom`       | `spacing`      |\n| `ps`, `paddingStart`  | `padding-inline-start` | `spacing`      |\n| `pe`, `paddingEnd`    | `padding-inline-end`   | `spacing`      |\n\n### Horizontal and Vertical padding\n\nUse the `padding{X,Y}` props to apply padding on the horizontal and vertical\naxis of an element\n\n```jsx\n<Box paddingX=\"8\" />\n<Box px=\"8\" /> // shorthand\n\n<Box paddingY=\"8\" />\n<Box py=\"8\" /> // shorthand\n```\n\n| Prop                  | CSS Property           | Token Category |\n| --------------------- | ---------------------- | -------------- |\n| `p`,`padding`         | `padding`              | `spacing`      |\n| `pl`, `paddingLeft`   | `padding-left`         | `spacing`      |\n| `pr`, `paddingRight`  | `padding-right`        | `spacing`      |\n| `pt`, `paddingTop`    | `padding-top`          | `spacing`      |\n| `pb`, `paddingBottom` | `padding-bottom`       | `spacing`      |\n| `px`, `paddingX`      | `padding-inline`       | `spacing`      |\n| `py`, `paddingY`      | `padding-block`        | `spacing`      |\n| `ps`, `paddingStart`  | `padding-inline-start` | `spacing`      |\n| `pe`, `paddingEnd`    | `padding-inline-end`   | `spacing`      |\n\n## Margin\n\n### All sides\n\nUse the `margin` prop to apply margin on all sides of an element\n\n```jsx\n<Box margin=\"5\" />\n<Box m=\"5\" /> // shorthand\n```\n\n| Prop         | CSS Property | Token Category |\n| ------------ | ------------ | -------------- |\n| `m`,`margin` | `margin`     | `spacing`      |\n\n### Specific side\n\nUse the `margin{Left,Right,Top,Bottom}` to apply margin on one side of an\nelement\n\n```jsx\n<Box marginLeft=\"3\" />\n<Box ml=\"3\" /> // shorthand\n\n<Box marginTop=\"3\" />\n<Box mt=\"3\" /> // shorthand\n```\n\nUse the `margin{Start,End}` properties to apply margin on the logical axis of an\nelement based on the text direction.\n\n```jsx\n<Box marginStart=\"8\" />\n<Box ms=\"8\" /> // shorthand\n\n<Box marginEnd=\"8\" />\n<Box me=\"8\" /> // shorthand\n```\n\n| Prop                 | CSS Property          | Token Category |\n| -------------------- | --------------------- | -------------- |\n| `ml`, `marginLeft`   | `margin-left`         | `spacing`      |\n| `mr`, `marginRight`  | `margin-right`        | `spacing`      |\n| `mt`, `marginTop`    | `margin-top`          | `spacing`      |\n| `mb`, `marginBottom` | `margin-bottom`       | `spacing`      |\n| `ms`, `marginStart`  | `margin-inline-start` | `spacing`      |\n| `me`, `marginEnd`    | `margin-inline-end`   | `spacing`      |\n\n### Horizontal and Vertical margin\n\nUse the `margin{X,Y}` properties to apply margin on the horizontal and vertical\naxis of an element\n\n```jsx\n<Box marginX=\"8\" />\n<Box mx=\"8\" /> // shorthand\n\n<Box marginY=\"8\" />\n<Box my=\"8\" /> // shorthand\n```\n\n| Prop            | CSS Property  | Token Category |\n| --------------- | ------------- | -------------- |\n| `mx`, `marginX` | `margin-left` | `spacing`      |\n| `my`, `marginY` | `margin-top`  | `spacing`      |\n\n## Spacing Between\n\nUse the `space{X,Y}` props to apply spacing between elements. This approach uses\nthe owl selector `> * + *` to apply the spacing between the elements using\n`margin*` properties.\n\n:::info\n\nIt's recommended to use the `space` prop over the `gap` prop for spacing when\nyou need negative spacing.\n\n:::\n\n```jsx\n<Box display=\"flex\" spaceX=\"8\">\n  <Box>Item 1</Box>\n  <Box>Item 2</Box>\n  <Box>Item 3</Box>\n</Box>\n\n<Box display=\"flex\" spaceY=\"8\">\n  <Box>Item 1</Box>\n  <Box>Item 2</Box>\n  <Box>Item 3</Box>\n</Box>\n```\n\n| Prop     | CSS Property          | Token Category |\n| -------- | --------------------- | -------------- |\n| `spaceX` | `margin-inline-start` | `spacing`      |\n| `spaceY` | `margin-block-start`  | `spacing`      |\n"
  },
  "packages/bleh-ui/src/docs/style-props-typography.mdx": {
    "meta": {
      "id": "Style Props-Typography",
      "title": "Typography",
      "description": "JSX style props for styling text",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/src/docs/style-props-typography.mdx",
      "menu": [
        "Style Props",
        "Typography"
      ],
      "route": "style-props/typography",
      "tags": [
        "document"
      ],
      "toc": [
        {
          "value": "Font Family",
          "href": "#font-family",
          "depth": 2,
          "numbering": [
            1,
            1
          ],
          "parent": "root"
        },
        {
          "value": "Font Size",
          "href": "#font-size",
          "depth": 2,
          "numbering": [
            1,
            2
          ],
          "parent": "root"
        },
        {
          "value": "Text Styles",
          "href": "#text-styles",
          "depth": 2,
          "numbering": [
            1,
            3
          ],
          "parent": "root"
        },
        {
          "value": "Font Style",
          "href": "#font-style",
          "depth": 2,
          "numbering": [
            1,
            4
          ],
          "parent": "root"
        },
        {
          "value": "Font Weight",
          "href": "#font-weight",
          "depth": 2,
          "numbering": [
            1,
            5
          ],
          "parent": "root"
        },
        {
          "value": "Font Variant Numeric",
          "href": "#font-variant-numeric",
          "depth": 2,
          "numbering": [
            1,
            6
          ],
          "parent": "root"
        },
        {
          "value": "Letter Spacing",
          "href": "#letter-spacing",
          "depth": 2,
          "numbering": [
            1,
            7
          ],
          "parent": "root"
        },
        {
          "value": "Truncation",
          "href": "#truncation",
          "depth": 2,
          "numbering": [
            1,
            8
          ],
          "parent": "root"
        },
        {
          "value": "Line Clamp",
          "href": "#line-clamp",
          "depth": 2,
          "numbering": [
            1,
            9
          ],
          "parent": "root"
        },
        {
          "value": "Line Height",
          "href": "#line-height",
          "depth": 2,
          "numbering": [
            1,
            10
          ],
          "parent": "root"
        },
        {
          "value": "Text Align",
          "href": "#text-align",
          "depth": 2,
          "numbering": [
            1,
            11
          ],
          "parent": "root"
        },
        {
          "value": "Text Color",
          "href": "#text-color",
          "depth": 2,
          "numbering": [
            1,
            12
          ],
          "parent": "root"
        },
        {
          "value": "Text Decoration",
          "href": "#text-decoration",
          "depth": 2,
          "numbering": [
            1,
            13
          ],
          "parent": "root"
        },
        {
          "value": "Text Decoration Color",
          "href": "#text-decoration-color",
          "depth": 2,
          "numbering": [
            1,
            14
          ],
          "parent": "root"
        },
        {
          "value": "Text Decoration Style",
          "href": "#text-decoration-style",
          "depth": 2,
          "numbering": [
            1,
            15
          ],
          "parent": "root"
        },
        {
          "value": "Text Decoration Thickness",
          "href": "#text-decoration-thickness",
          "depth": 2,
          "numbering": [
            1,
            16
          ],
          "parent": "root"
        },
        {
          "value": "Text Underline Offset",
          "href": "#text-underline-offset",
          "depth": 2,
          "numbering": [
            1,
            17
          ],
          "parent": "root"
        },
        {
          "value": "Text Transform",
          "href": "#text-transform",
          "depth": 2,
          "numbering": [
            1,
            18
          ],
          "parent": "root"
        },
        {
          "value": "Text Overflow",
          "href": "#text-overflow",
          "depth": 2,
          "numbering": [
            1,
            19
          ],
          "parent": "root"
        },
        {
          "value": "Text Shadow",
          "href": "#text-shadow",
          "depth": 2,
          "numbering": [
            1,
            20
          ],
          "parent": "root"
        },
        {
          "value": "Text Indent",
          "href": "#text-indent",
          "depth": 2,
          "numbering": [
            1,
            21
          ],
          "parent": "root"
        },
        {
          "value": "Vertical Align",
          "href": "#vertical-align",
          "depth": 2,
          "numbering": [
            1,
            22
          ],
          "parent": "root"
        },
        {
          "value": "White Space",
          "href": "#white-space",
          "depth": 2,
          "numbering": [
            1,
            23
          ],
          "parent": "root"
        },
        {
          "value": "Word Break",
          "href": "#word-break",
          "depth": 2,
          "numbering": [
            1,
            24
          ],
          "parent": "root"
        },
        {
          "value": "Hyphens",
          "href": "#hyphens",
          "depth": 2,
          "numbering": [
            1,
            25
          ],
          "parent": "root"
        }
      ]
    },
    "mdx": "\n# Typography\n\nJSX style props for styling text\n\n## Font Family\n\nUse the `fontFamily` prop to set the font family of a text element.\n\n```jsx\n<Text fontFamily=\"mono\">Hello World</Text>\n```\n\n| Prop         | CSS Property  | Token Category |\n| ------------ | ------------- | -------------- |\n| `fontFamily` | `font-family` | `fonts`        |\n\n## Font Size\n\nUse the `fontSize` prop to set the font size of a text element.\n\n```jsx\n// hardcoded values\n<Text fontSize=\"12px\">Hello World</Text>\n<Text fontSize=\"10rem\">Hello World</Text>\n\n// token values\n<Text fontSize=\"xs\">Hello World</Text>\n<Text fontSize=\"4xl\">Hello World</Text>\n<Text fontSize=\"5xl\">Hello World</Text>\n```\n\n| Prop       | CSS Property | Token Category |\n| ---------- | ------------ | -------------- |\n| `fontSize` | `font-size`  | `fonts`        |\n\n## Text Styles\n\nUse the `textStyle` prop to apply both a font size, line height, and letter\nspacing composition at once.\n\n```jsx\n<Text textStyle=\"xs\">Hello World</Text>\n<Text textStyle=\"sm\">Hello World</Text>\n<Text textStyle=\"md\">Hello World</Text>\n<Text textStyle=\"lg\">Hello World</Text>\n<Text textStyle=\"xl\">Hello World</Text>\n<Text textStyle=\"2xl\">Hello World</Text>\n<Text textStyle=\"3xl\">Hello World</Text>\n<Text textStyle=\"4xl\">Hello World</Text>\n<Text textStyle=\"5xl\">Hello World</Text>\n```\n\n| Prop        | Config             |\n| ----------- | ------------------ |\n| `textStyle` | `theme.textStyles` |\n\n## Font Style\n\nUse the `fontStyle` prop to set the font style of a text element.\n\n```jsx\n<Text fontStyle=\"italic\">Hello World</Text>\n```\n\n| Prop        | CSS Property | Token Category |\n| ----------- | ------------ | -------------- |\n| `fontStyle` | `font-style` | none           |\n\n## Font Weight\n\nUse the `fontWeight` prop to set the font weight of a text element.\n\n```jsx\n// hardcoded values\n<Text fontWeight=\"600\">Hello World</Text>\n\n// token values\n<Text fontWeight=\"semibold\">Hello World</Text>\n```\n\n| Prop         | CSS Property  | Token Category |\n| ------------ | ------------- | -------------- |\n| `fontWeight` | `font-weight` | `fontWeights`  |\n\n## Font Variant Numeric\n\nUse the `fontVariantNumeric` prop to set the font variant numeric of a text\nelement.\n\n```jsx\n<Text fontVariantNumeric=\"lining-nums\">Hello World</Text>\n```\n\n| Prop                 | CSS Property           | Token Category |\n| -------------------- | ---------------------- | -------------- |\n| `fontVariantNumeric` | `font-variant-numeric` | none           |\n\n## Letter Spacing\n\nUse the `letterSpacing` prop to set the letter spacing of a text element.\n\n```jsx\n// hardcoded values\n<Text letterSpacing=\"0.1rem\">Hello World</Text>\n\n// token values\n<Text letterSpacing=\"tight\">Hello World</Text>\n<Text letterSpacing=\"wide\">Hello World</Text>\n<Text letterSpacing=\"wider\">Hello World</Text>\n<Text letterSpacing=\"widest\">Hello World</Text>\n```\n\n| Prop            | CSS Property     | Token Category   |\n| --------------- | ---------------- | ---------------- |\n| `letterSpacing` | `letter-spacing` | `letterSpacings` |\n\n## Truncation\n\nUse the `truncate` prop to truncate text.\n\n```jsx\n<Text truncate>Lorem ipsum dolor sit amet...</Text>\n```\n\n| Prop       | CSS Property    | Token Category |\n| ---------- | --------------- | -------------- |\n| `truncate` | `text-overflow` | none           |\n\n## Line Clamp\n\nUse the `lineClamp` prop to truncate multi-line text. Set `lineClamp` to `none`\nto disable truncation.\n\n```jsx\n<Text lineClamp=\"2\">Lorem ipsum dolor sit amet...</Text>\n\n// revert truncation\n<Text lineClamp=\"none\">Lorem ipsum dolor sit amet...</Text>\n```\n\n| Prop        | CSS Property        | Token Category |\n| ----------- | ------------------- | -------------- |\n| `lineClamp` | `webkit-line-clamp` | none           |\n\n## Line Height\n\nUse the `lineHeight` prop to set the line height of a text element.\n\n```jsx\n// hardcoded values\n<Text lineHeight=\"1.5\">Hello World</Text>\n\n// token values\n<Text lineHeight=\"tall\">Hello World</Text>\n```\n\n| Prop         | CSS Property  | Token Category |\n| ------------ | ------------- | -------------- |\n| `lineHeight` | `line-height` | `lineHeights`  |\n\n## Text Align\n\nUse the `textAlign` prop to set the text alignment of a text element.\n\n```jsx\n<Text textAlign=\"left\">Hello World</Text>\n<Text textAlign=\"center\">Hello World</Text>\n<Text textAlign=\"right\">Hello World</Text>\n<Text textAlign=\"justify\">Hello World</Text>\n```\n\n| Prop        | CSS Property | Token Category |\n| ----------- | ------------ | -------------- |\n| `textAlign` | `text-align` | none           |\n\n## Text Color\n\nUse the `color` prop to set the color of a text element.\n\n```jsx\n<Text color=\"red\">Hello World</Text>\n```\n\n| Prop    | CSS Property | Token Category |\n| ------- | ------------ | -------------- |\n| `color` | `color`      | `colors`       |\n\n## Text Decoration\n\nUse the `textDecoration` or `textDecor` prop to set the text decoration of a\ntext element.\n\n```jsx\n<Text textDecoration=\"underline\">Hello World</Text>\n```\n\n| Prop                          | CSS Property      | Token Category |\n| ----------------------------- | ----------------- | -------------- |\n| `textDecor`, `textDecoration` | `text-decoration` | none           |\n\n## Text Decoration Color\n\nUse the `textDecorationColor` prop to set the text decoration color of a text\nelement.\n\n```jsx\n<Text textDecoration=\"underline\" textDecorationColor=\"red\">\n  Hello World\n</Text>\n```\n\n| Prop                  | CSS Property            | Token Category |\n| --------------------- | ----------------------- | -------------- |\n| `textDecorationColor` | `text-decoration-color` | `colors`       |\n\n## Text Decoration Style\n\nUse the `textDecorationStyle` prop to set the text decoration style of a text\nelement.\n\n```jsx\n<Text textDecoration=\"underline\" textDecorationStyle=\"dashed\">\n  Hello World\n</Text>\n```\n\n| Prop                  | CSS Property            | Token Category |\n| --------------------- | ----------------------- | -------------- |\n| `textDecorationStyle` | `text-decoration-style` | none           |\n\n## Text Decoration Thickness\n\nUse the `textDecorationThickness` prop to set the text decoration thickness of a\ntext element.\n\n```jsx\n<Text textDecoration=\"underline\" textDecorationThickness=\"1px\">\n  Hello World\n</Text>\n```\n\n| Prop                      | CSS Property                | Token Category |\n| ------------------------- | --------------------------- | -------------- |\n| `textDecorationThickness` | `text-decoration-thickness` | none           |\n\n## Text Underline Offset\n\nUse the `textUnderlineOffset` prop to set the text underline offset of a text\nelement.\n\n```jsx\n<Text textDecoration=\"underline\" textUnderlineOffset=\"1px\">\n  Hello World\n</Text>\n```\n\n| Prop                  | CSS Property            | Token Category |\n| --------------------- | ----------------------- | -------------- |\n| `textUnderlineOffset` | `text-underline-offset` | none           |\n\n## Text Transform\n\nUse the `textTransform` prop to set the text transform of a text element.\n\n```jsx\n<Text textTransform=\"uppercase\">Hello World</Text>\n```\n\n| Prop            | CSS Property     | Token Category |\n| --------------- | ---------------- | -------------- |\n| `textTransform` | `text-transform` | none           |\n\n## Text Overflow\n\nUse the `textOverflow` prop to set the text overflow of a text element.\n\n```jsx\n<Text textOverflow=\"ellipsis\">Hello World</Text>\n```\n\n| Prop           | CSS Property    | Token Category |\n| -------------- | --------------- | -------------- |\n| `textOverflow` | `text-overflow` | none           |\n\n## Text Shadow\n\nUse the `textShadow` prop to set the text shadow of a text element.\n\n```jsx\n<Text textShadow=\"0 0 1px red\">Hello World</Text>\n```\n\n| Prop         | CSS Property  | Token Category |\n| ------------ | ------------- | -------------- |\n| `textShadow` | `text-shadow` | `shadows`      |\n\n## Text Indent\n\nUse the `textIndent` prop to set the text indent of a text element.\n\n```jsx\n// hardcoded values\n<Text textIndent=\"1rem\">Hello World</Text>\n\n// token values\n<Text textIndent=\"3\">Hello World</Text>\n```\n\n| Prop         | CSS Property  | Token Category |\n| ------------ | ------------- | -------------- |\n| `textIndent` | `text-indent` | `spacing`      |\n\n## Vertical Align\n\nUse the `verticalAlign` prop to set the vertical alignment of a text element.\n\n```jsx\n<Text verticalAlign=\"top\">Hello World</Text>\n```\n\n| Prop            | CSS Property     | Token Category |\n| --------------- | ---------------- | -------------- |\n| `verticalAlign` | `vertical-align` | none           |\n\n## White Space\n\nUse the `whiteSpace` prop to set the white space of a text element.\n\n```jsx\n<Text whiteSpace=\"nowrap\">Hello World</Text>\n```\n\n| Prop         | CSS Property  | Token Category |\n| ------------ | ------------- | -------------- |\n| `whiteSpace` | `white-space` | none           |\n\n## Word Break\n\nUse the `wordBreak` prop to set whether line breaks appear wherever the text\nwould otherwise overflow its content box.\n\n```jsx\n<Text wordBreak=\"break-all\">Hello World</Text>\n```\n\n| Prop        | CSS Property | Token Category |\n| ----------- | ------------ | -------------- |\n| `wordBreak` | `word-break` | none           |\n\n## Hyphens\n\nUse the `hyphens` prop to set whether hyphens are used in the text.\n\n```jsx\n<Text hyphens=\"auto\">Hello World</Text>\n```\n\n| Prop      | CSS Property | Token Category |\n| --------- | ------------ | -------------- |\n| `hyphens` | `hyphens`    | none           |\n"
  },
  "packages/bleh-ui/src/docs/style-props.mdx": {
    "meta": {
      "id": "Home-Style Props",
      "title": "Style Props",
      "description": "JSX style props for applying CSS rules",
      "documentState": "InitialDraft",
      "order": 4,
      "repoPath": "packages/bleh-ui/src/docs/style-props.mdx",
      "menu": [
        "Style Props"
      ],
      "route": "style-props",
      "tags": [
        "document"
      ],
      "toc": []
    },
    "mdx": "\n# Style Props\n\nJSX style props for applying CSS rules\n"
  },
  "packages/bleh-ui/src/docs/svg.mdx": {
    "meta": {
      "id": "Style Props-SVG",
      "title": "SVG",
      "description": "JSX style props for SVG elements.",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/src/docs/svg.mdx",
      "menu": [
        "Style Props",
        "SVG"
      ],
      "route": "style-props/svg",
      "tags": [
        "document"
      ],
      "toc": [
        {
          "value": "Fill",
          "href": "#fill",
          "depth": 2,
          "numbering": [
            1,
            1
          ],
          "parent": "root"
        },
        {
          "value": "Stroke",
          "href": "#stroke",
          "depth": 2,
          "numbering": [
            1,
            2
          ],
          "parent": "root"
        },
        {
          "value": "Stroke Width",
          "href": "#stroke-width",
          "depth": 2,
          "numbering": [
            1,
            3
          ],
          "parent": "root"
        }
      ]
    },
    "mdx": "\n# SVG\n\nJSX style props for SVG elements.\n\n## Fill\n\nUse the `fill` prop to set the fill color of an SVG element.\n\n```jsx\n<chakra.svg fill=\"blue.500\">\n  <path d=\"...\" />\n</chakra.svg>\n```\n\n| Prop   | CSS Property | Token Category |\n| ------ | ------------ | -------------- |\n| `fill` | `fill`       | `colors`       |\n\n## Stroke\n\nUse the `stroke` prop to set the stroke color of an SVG element.\n\n```jsx\n<chakra.svg stroke=\"blue.500\">\n  <path d=\"...\" />\n</chakra.svg>\n```\n\n| Prop     | CSS Property | Token Category |\n| -------- | ------------ | -------------- |\n| `stroke` | `stroke`     | `colors`       |\n\n## Stroke Width\n\nUse the `strokeWidth` prop to set the stroke width of an SVG element.\n\n```jsx\n<chakra.svg strokeWidth=\"1px\">\n  <path d=\"...\" />\n</chakra.svg>\n```\n\n| Prop          | CSS Property   | Token Category |\n| ------------- | -------------- | -------------- |\n| `strokeWidth` | `stroke-width` | `borderWidths` |\n"
  },
  "packages/bleh-ui/src/docs/tables.mdx": {
    "meta": {
      "id": "Style Props-Tables",
      "title": "Tables",
      "description": "JSX style props for styling table elements.",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/src/docs/tables.mdx",
      "menu": [
        "Style Props",
        "Tables"
      ],
      "route": "style-props/tables",
      "tags": [
        "document"
      ],
      "toc": [
        {
          "value": "Border Spacing",
          "href": "#border-spacing",
          "depth": 2,
          "numbering": [
            1,
            1
          ],
          "parent": "root"
        },
        {
          "value": "Border Spacing X",
          "href": "#border-spacing-x",
          "depth": 2,
          "numbering": [
            1,
            2
          ],
          "parent": "root"
        },
        {
          "value": "Border Spacing Y",
          "href": "#border-spacing-y",
          "depth": 2,
          "numbering": [
            1,
            3
          ],
          "parent": "root"
        },
        {
          "value": "Caption Side",
          "href": "#caption-side",
          "depth": 2,
          "numbering": [
            1,
            4
          ],
          "parent": "root"
        }
      ]
    },
    "mdx": "\n# Tables\n\nJSX style props for styling table elements.\n\n## Border Spacing\n\nControl the border-spacing property of a table.\n\n```jsx\n<chakra.table borderSpacing=\"2\">\n  <tbody>\n    <tr>\n      <td>Cell 1</td>\n      <td>Cell 2</td>\n    </tr>\n  </tbody>\n</chakra.table>\n```\n\n| Prop            | CSS Property     | Token Category |\n| --------------- | ---------------- | -------------- |\n| `borderSpacing` | `border-spacing` | `spacing`      |\n\n## Border Spacing X\n\nUse the `borderSpacingX` prop to set the horizontal border-spacing property of a\ntable.\n\n```jsx\n<chakra.table borderSpacingX=\"2\">\n  <tbody>\n    <tr>\n      <td>Cell 1</td>\n      <td>Cell 2</td>\n    </tr>\n  </tbody>\n</chakra.table>\n```\n\n| Prop             | CSS Property     | Token Category |\n| ---------------- | ---------------- | -------------- |\n| `borderSpacingX` | `border-spacing` | `spacing`      |\n\n## Border Spacing Y\n\nUse the `borderSpacingY` prop to set the vertical border-spacing property of a\ntable.\n\n```jsx\n<chakra.table borderSpacingY=\"2\">\n  <tbody>\n    <tr>\n      <td>Cell 1</td>\n      <td>Cell 2</td>\n    </tr>\n  </tbody>\n</chakra.table>\n```\n\n| Prop             | CSS Property     | Token Category |\n| ---------------- | ---------------- | -------------- |\n| `borderSpacingY` | `border-spacing` | `spacing`      |\n\n## Caption Side\n\nUse the `captionSide` prop to set the side of the caption of a table.\n\n```jsx\n<table>\n  <chakra.caption captionSide=\"bottom\">This is a caption</chakra.caption>\n  <tbody>\n    <tr>\n      <td>Cell 1</td>\n      <td>Cell 2</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n| Prop          | CSS Property   | Token Category |\n| ------------- | -------------- | -------------- |\n| `captionSide` | `caption-side` | -              |\n"
  },
  "packages/bleh-ui/src/docs/toc.mdx": {
    "meta": {
      "id": "Toc",
      "title": "Toc",
      "description": "Let's get the table of contents automatically generated",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/src/docs/toc.mdx",
      "menu": [
        "Playground",
        "Toc"
      ],
      "route": "playground/toc",
      "tags": [
        "playground",
        "exploring"
      ],
      "toc": [
        {
          "value": "Level 2.1",
          "href": "#level-21",
          "depth": 2,
          "numbering": [
            1,
            1
          ],
          "parent": "root"
        },
        {
          "value": "Level 3.1",
          "href": "#level-31",
          "depth": 3,
          "numbering": [
            1,
            1,
            1
          ],
          "parent": "root"
        },
        {
          "value": "Level 4.1",
          "href": "#level-41",
          "depth": 4,
          "numbering": [
            1,
            1,
            1,
            1
          ],
          "parent": "root"
        },
        {
          "value": "Level 4.2",
          "href": "#level-42",
          "depth": 4,
          "numbering": [
            1,
            1,
            1,
            2
          ],
          "parent": "root"
        },
        {
          "value": "Level 3.2",
          "href": "#level-32",
          "depth": 3,
          "numbering": [
            1,
            1,
            2
          ],
          "parent": "root"
        },
        {
          "value": "Level 2.2",
          "href": "#level-22",
          "depth": 2,
          "numbering": [
            1,
            2
          ],
          "parent": "root"
        }
      ]
    },
    "mdx": "\n# Toc\n\nThis is the place to try out things.\n\n## Level 2.1\n\nFirst Level 2 Heading\n\n### Level 3.1\n\nFirst Level 3 Heading\n\n#### Level 4.1\n\nFirst Level 4 Heading\n\n#### Level 4.2\n\nSecond Level 4 Heading\n\n### Level 3.2\n\nSecond Level 3 Heading\n\n## Level 2.2\n"
  },
  "packages/bleh-ui/src/docs/tokens-other.mdx": {
    "meta": {
      "id": "Tokens-Other",
      "title": "Other",
      "description": "Less frequently used design-tokens",
      "documentState": "InitialDraft",
      "order": 9999,
      "repoPath": "packages/bleh-ui/src/docs/tokens-other.mdx",
      "menu": [
        "Tokens",
        "Other"
      ],
      "route": "tokens/other",
      "tags": [
        "document"
      ],
      "toc": [],
      "icon": "Ellipsis"
    },
    "mdx": "\n# Other\n\nLess frequently used design-tokens\n"
  },
  "packages/bleh-ui/src/docs/tokens.mdx": {
    "meta": {
      "id": "Tokens",
      "title": "Tokens",
      "description": "design tokens to be used in conjunction with the ui components",
      "documentState": "InitialDraft",
      "order": 2,
      "repoPath": "packages/bleh-ui/src/docs/tokens.mdx",
      "menu": [
        "Tokens"
      ],
      "route": "tokens",
      "tags": [
        "tokens",
        "design"
      ],
      "toc": []
    },
    "mdx": "\n# Tokens\n\nA collection of design tokens\n"
  },
  "packages/bleh-ui/src/docs/tokens/animations.mdx": {
    "meta": {
      "id": "TokensAnimations",
      "title": "Animations",
      "description": "The list of available animation tokens",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/src/docs/tokens/animations.mdx",
      "menu": [
        "Tokens",
        "Other",
        "Animations"
      ],
      "route": "tokens/other/animations",
      "tags": [
        "animation",
        "transition"
      ],
      "toc": [
        {
          "value": "Shorthands",
          "href": "#shorthands",
          "depth": 2,
          "numbering": [
            1,
            1
          ],
          "parent": "root"
        },
        {
          "value": "Keyframe Animations",
          "href": "#keyframe-animations",
          "depth": 2,
          "numbering": [
            1,
            2
          ],
          "parent": "root"
        },
        {
          "value": "Durations",
          "href": "#durations",
          "depth": 2,
          "numbering": [
            1,
            3
          ],
          "parent": "root"
        },
        {
          "value": "Easings",
          "href": "#easings",
          "depth": 2,
          "numbering": [
            1,
            4
          ],
          "parent": "root"
        }
      ],
      "icon": "Move3d"
    },
    "mdx": "\n# Animations\n\nThis page provides a list of tokens for applying ready made animations\n(shorthands) or creating custom animations or transitions by combining keyframe\nanimations with durations and easings.\n\n## Shorthands\n\nThe following list of shorthand tokens can be used as `animation` property\nvalue, they combine a keyframe animation with duration and easing for a reusable\nanimation definition.\n\n<GenericTokenTableDemo category=\"animations\" demoProperty=\"animation\" />\n\n## Keyframe Animations\n\nCSS keyframe animations define animations as a sequence of steps, each with its\nown set of properties. They allow for more complex, multi-step animations that\ncan be controlled with keyframes and timing functions.\n\n<KeyframeTokenDemo />\n\n## Durations\n\nDurations define **how long** an animation takes to complete one cycle, directly\nimpacting the perception of speed and fluidity.\n\nShort durations create snappy, quick interactions that feel responsive but can\nrisk appearing abrupt. Longer durations allow for smoother, more deliberate\nmotion but can feel sluggish if overused.\n\nFinding the right balance is key—durations should match the context and intent\nof the interaction. They’re measured in seconds or milliseconds and are often\npaired with easings to create harmonious, intentional animations.\n\n<DurationTokenDemo />\n\n## Easings\n\n_Easings_ determine **the rate of change** of an animation over time,\nessentially defining how an animation transitions between its start and end\nstates.\n\nInstead of moving linearly, animations can accelerate, decelerate, or follow\ncomplex curves, making the motion feel more dynamic and natural.\n\nThis is achieved through mathematical easing functions, like linear\ninterpolation or bezier curves, which map progress over time to the visible\nchange in animation properties. It controls the \"rhythm\" of the animation,\nensuring it feels fluid or deliberate depending on the desired effect.\n\n<EasingTokenDemo />\n"
  },
  "packages/bleh-ui/src/docs/tokens/aspect-ratios.mdx": {
    "meta": {
      "id": "TokensAspectRatios",
      "title": "Aspect Ratios",
      "description": "The list of available aspect ratio tokens",
      "documentState": "InitialDraft",
      "documentAudiences": [],
      "order": 999,
      "repoPath": "packages/bleh-ui/src/docs/tokens/aspect-ratios.mdx",
      "menu": [
        "Tokens",
        "Aspect Ratios"
      ],
      "route": "tokens/aspect-ratios",
      "tags": [
        "aspect ratio",
        "ratios"
      ],
      "toc": [],
      "icon": "Ratio"
    },
    "mdx": "\n# Aspect Ratios\n\nThe list of available aspect ratio tokens:\n\n<GenericTokenTableDemo category=\"aspectRatios\" demoProperty=\"aspectRatio\" />\n"
  },
  "packages/bleh-ui/src/docs/tokens/blurs.mdx": {
    "meta": {
      "id": "TokensBlurs",
      "title": "Blurs",
      "description": "The list of available blur tokens",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/src/docs/tokens/blurs.mdx",
      "menu": [
        "Tokens",
        "Other",
        "Blurs"
      ],
      "route": "tokens/other/blurs",
      "tags": [
        "blur"
      ],
      "toc": [],
      "icon": "Blend"
    },
    "mdx": "\n# Blurs\n\nThe list of available blur tokens:\n\n<GenericTokenTableDemo category=\"blurs\" demoProperty=\"blur\" />\n"
  },
  "packages/bleh-ui/src/docs/tokens/borders.mdx": {
    "meta": {
      "id": "TokensBorders",
      "title": "Borders",
      "description": "The list of available border tokens",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/src/docs/tokens/borders.mdx",
      "menu": [
        "Tokens",
        "Borders"
      ],
      "route": "tokens/borders",
      "tags": [
        "border"
      ],
      "toc": [],
      "icon": "Logs"
    },
    "mdx": "\n# Borders\n\nThe list of available border tokens:\n\n<GenericTokenTableDemo category=\"borders\" demoProperty=\"border\" />\n\n> [!IMPORTANT]  \n> The design system uses `box-sizing: border-box` as a default. If you assign an\n> element a `width` of `100px`, the computed `border-width` value will be\n> included in the `100px`, effectively reducing the amount of space available\n> for content.\n"
  },
  "packages/bleh-ui/src/docs/tokens/breakpoints.mdx": {
    "meta": {
      "id": "Breakpoints",
      "title": "Breakpoints",
      "description": "The list of available breakpoints",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/src/docs/tokens/breakpoints.mdx",
      "menu": [
        "Tokens",
        "Other",
        "Breakpoints"
      ],
      "route": "tokens/other/breakpoints",
      "tags": [
        "z-index",
        "layer",
        "stacking",
        "context"
      ],
      "toc": [
        {
          "value": "Tokens",
          "href": "#tokens",
          "depth": 2,
          "numbering": [
            1,
            1
          ],
          "parent": "root"
        }
      ],
      "icon": "TabletSmartphone"
    },
    "mdx": "\n# Breakpoints\n\nBreakpoints define specific screen widths at which your design should adapt to\nprovide an optimal viewing experience for users. They are thresholds that\nrepresent a starting point for changes in styling, such as font sizes, layouts,\nand visibility of elements.\n\nEach breakpoint is a minimum width, meaning that styles associated with that\nbreakpoint apply to screen sizes equal to or larger than the specified width.\nThe styles remain active until the next breakpoint threshold is reached.\n\n## Tokens\n\nThe breakpoints **start** at the specified value and **end** at the next\nbreakpoint value. The following breakpoint-tokens are supported:\n\n<GenericTokenTableDemo category=\"breakpoints\" />\n"
  },
  "packages/bleh-ui/src/docs/tokens/colors.mdx": {
    "meta": {
      "id": "Colors",
      "title": "Colors",
      "description": "available colors",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/src/docs/tokens/colors.mdx",
      "menu": [
        "Tokens",
        "Colors"
      ],
      "route": "tokens/colors",
      "tags": [
        "colors"
      ],
      "toc": [
        {
          "value": "Scale steps",
          "href": "#scale-steps",
          "depth": 2,
          "numbering": [
            1,
            1
          ],
          "parent": "root"
        },
        {
          "value": "System Colors",
          "href": "#system-colors",
          "depth": 2,
          "numbering": [
            1,
            2
          ],
          "parent": "root"
        },
        {
          "value": "Blacks & Whites",
          "href": "#blacks--whites",
          "depth": 2,
          "numbering": [
            1,
            3
          ],
          "parent": "root"
        },
        {
          "value": "Brand Colors",
          "href": "#brand-colors",
          "depth": 2,
          "numbering": [
            1,
            4
          ],
          "parent": "root"
        },
        {
          "value": "Semantic Colors",
          "href": "#semantic-colors",
          "depth": 2,
          "numbering": [
            1,
            5
          ],
          "parent": "root"
        }
      ],
      "icon": "Palette"
    },
    "mdx": "\n# Colors\n\nIn our design system, colors are organized into **scales** based on **contrast**\nlevels to ensure clarity and **usability** across various contexts. Each scale\nprovides a range of tones, from subtle backgrounds to high-contrast elements\nlike text and interactive borders, enabling a consistent and accessible user\nexperience.\n\nThe scales are _interchangeable_, meaning a color like red can be swapped with\ngreen without losing the intended contrast levels. This flexibility ensures that\nour designs remain adaptable while maintaining visual hierarchy. Additionally,\n_the contrast-based approach eliminates the need for a separate \"dark mode\"\ndesign_, as the scales naturally support both light and dark environments\nseamlessly.\n\n## Scale steps\n\nBelow is a list of steps with corresponding use cases for various background,\nborder, and text styles in the design system:\n\n| **Step** | **Use Case**                                           |\n| -------- | ------------------------------------------------------ |\n| 1        | App background                                         |\n| 2        | Subtle background                                      |\n| 3        | UI element background                                  |\n| 4        | Hovered UI element background                          |\n| 5        | Active / Selected UI element background                |\n| 6        | Subtle borders and separators                          |\n| 7        | UI element border and focus rings                      |\n| 8        | Hovered UI element border                              |\n| 9        | Solid backgrounds                                      |\n| 10       | Hovered solid backgrounds                              |\n| 11       | Low-contrast text                                      |\n| 12       | High-contrast text                                     |\n| contrast | a contrast color (black/white) that works on step 9+10 |\n\n## System Colors\n\nColors available for decoration or reference.\n\n<br />\n\n<ColorScales ids=\"tomato,red,ruby, crimson, pink, plum, purple, violet, iris,indigo,blue,cyan, teal,jade,green,grass,bronze,gold,brown,orange,amber,yellow,lime,mint,sky\" />\n\n## Blacks & Whites\n\nBlack and white color scales do not adapt to the selected color-mode. Means a\nwhite will always be white, a black will always be black.\n\n> [!TIP]  \n> Use the `neutral` color scales if you want to refer to a gray-tone that works\n> on the current background color (light-/dark-mode dependent).\n\n<br />\n\n<ColorScales ids=\"blackAlpha, whiteAlpha\" />\n\n## Brand Colors\n\nCustom colors, tailored to the brand.\n\n<br />\n\n<ColorScales ids=\"ctviolet, ctteal, ctyellow\" />\n\n## Semantic Colors\n\nColors with meaning, used to communicate status or state.\n\n<br />\n\n<ColorScales ids=\"primary, neutral, info, success, danger, error\" />\n"
  },
  "packages/bleh-ui/src/docs/tokens/cursors.mdx": {
    "meta": {
      "id": "TokensCursors",
      "title": "Cursors",
      "description": "The list of available cursor tokens",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/src/docs/tokens/cursors.mdx",
      "menu": [
        "Tokens",
        "Other",
        "Cursors"
      ],
      "route": "tokens/other/cursors",
      "tags": [
        "cursor"
      ],
      "toc": [],
      "icon": "MousePointer"
    },
    "mdx": "\n# Cursors\n\nThe list of available cursors. **Hover over the gray box** to see the cursor in\naction.\n\n<GenericTokenTableDemo category=\"cursor\" demoProperty=\"cursor\" />\n"
  },
  "packages/bleh-ui/src/docs/tokens/radii.mdx": {
    "meta": {
      "id": "TokensRadii",
      "title": "Radii",
      "description": "The list of available radius tokens",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/src/docs/tokens/radii.mdx",
      "menu": [
        "Tokens",
        "Radii"
      ],
      "route": "tokens/radii",
      "tags": [
        "radius",
        "radii",
        "border-radius"
      ],
      "toc": [
        {
          "value": "Tokens",
          "href": "#tokens",
          "depth": 2,
          "numbering": [
            1,
            1
          ],
          "parent": "root"
        }
      ],
      "icon": "Radius"
    },
    "mdx": "\n# Radii\n\nThe list of available radius tokens\n\n## Tokens\n\n<GenericTokenTableDemo category=\"radii\" demoProperty=\"borderRadius\" />\n"
  },
  "packages/bleh-ui/src/docs/tokens/shadows.mdx": {
    "meta": {
      "id": "TokensShadows",
      "title": "Shadows",
      "description": "The list of available shadow tokens",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/src/docs/tokens/shadows.mdx",
      "menu": [
        "Tokens",
        "Shadows"
      ],
      "route": "tokens/shadows",
      "tags": [
        "shadows"
      ],
      "toc": [
        {
          "value": "Tokens",
          "href": "#tokens",
          "depth": 2,
          "numbering": [
            1,
            1
          ],
          "parent": "root"
        }
      ],
      "icon": "SquareDashed"
    },
    "mdx": "\n# Shadows\n\nThe list of available shadow tokens\n\n## Tokens\n\n<GenericTokenTableDemo category=\"shadows\" demoProperty=\"boxShadow\" />\n"
  },
  "packages/bleh-ui/src/docs/tokens/sizes.mdx": {
    "meta": {
      "id": "TokensSizes",
      "title": "Sizes",
      "description": "The list of available size tokens",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/src/docs/tokens/sizes.mdx",
      "menu": [
        "Tokens",
        "Sizes"
      ],
      "route": "tokens/sizes",
      "tags": [
        "sizes"
      ],
      "toc": [
        {
          "value": "Numerical sizes",
          "href": "#numerical-sizes",
          "depth": 2,
          "numbering": [
            1,
            1
          ],
          "parent": "root"
        },
        {
          "value": "Proportional sizes",
          "href": "#proportional-sizes",
          "depth": 2,
          "numbering": [
            1,
            2
          ],
          "parent": "root"
        },
        {
          "value": "Large sizes",
          "href": "#large-sizes",
          "depth": 2,
          "numbering": [
            1,
            3
          ],
          "parent": "root"
        },
        {
          "value": "Breakpoint",
          "href": "#breakpoint",
          "depth": 2,
          "numbering": [
            1,
            4
          ],
          "parent": "root"
        },
        {
          "value": "Others",
          "href": "#others",
          "depth": 2,
          "numbering": [
            1,
            5
          ],
          "parent": "root"
        }
      ],
      "icon": "Ruler"
    },
    "mdx": "\n# Sizes\n\nDifferent size type tokens are available to suit various design needs, including\nnumerical, proportional, named, breakpoint, and others.\n\nThe list of available size tokens:\n\n## Numerical sizes\n\nPrecise, incrementally scaled units for defining fixed dimensions\n\n<SizesTokenDemo group=\"regular\" />\n\n## Proportional sizes\n\nProportional dimensional values expressed as fractions, suitable for dividing\nelements in layouts.\n\n<SizesTokenDemo group=\"fraction\" />\n\n## Large sizes\n\nSemantic size labels providing consistent values for specific dimensions,\nensuring clarity and reusability.\n\n<SizesTokenDemo group=\"large\" />\n\n## Breakpoint\n\nPredefined screen width thresholds to adjust dimensional values for responsive\nlayouts.\n\n<SizesTokenDemo group=\"breakpoint\" />\n\n## Others\n\nViewport-based or content-driven dimensional values for flexible and adaptive\nelement sizing.\n\n<SizesTokenDemo group=\"other\" />\n"
  },
  "packages/bleh-ui/src/docs/tokens/spacing.mdx": {
    "meta": {
      "id": "Spacing",
      "title": "Spacing",
      "description": "Spacing tokens are used to define the space between elements.",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/src/docs/tokens/spacing.mdx",
      "menu": [
        "Tokens",
        "Spacing"
      ],
      "route": "tokens/spacing",
      "tags": [
        "space",
        "spacing"
      ],
      "toc": [],
      "icon": "BetweenHorizontalEnd"
    },
    "mdx": "\n# Spacing Tokens\n\nSpacing tokens are used to define the space between elements. They are used to\ncreate consistent spacing between elements and to ensure that the layout is\nvisually balanced.\n\n> [!NOTE]  \n> Every token has a negative equivalent, in case you need to apply a negative\n> margin etc. Access the negative version by prependind the token name with a\n> dash. e.g. `-100`, `-400`, `-1000`, etc.\n\n<br />\n\n<SpacingTokenDemo />\n\n<br />\n\n> [!TIP]  \n> To quickly calculate the token value in px, take the token name and divide it\n> by 25. e.g. `100 / 25 = 4px`, `400 / 25 = 16px`, `1000 / 25 = 40px`, etc.\n"
  },
  "packages/bleh-ui/src/docs/tokens/typography.mdx": {
    "meta": {
      "id": "TokensTypography",
      "title": "Typography",
      "description": "everything typography related",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/src/docs/tokens/typography.mdx",
      "menu": [
        "Tokens",
        "Typography"
      ],
      "route": "tokens/typography",
      "tags": [
        "text",
        "headings",
        "strong",
        "bold",
        "italic",
        "emphasize"
      ],
      "toc": [
        {
          "value": "Text Styles",
          "href": "#text-styles",
          "depth": 2,
          "numbering": [
            1,
            1
          ],
          "parent": "root"
        },
        {
          "value": "Available Text Styles",
          "href": "#available-text-styles",
          "depth": 3,
          "numbering": [
            1,
            1,
            1
          ],
          "parent": "root"
        },
        {
          "value": "Fonts",
          "href": "#fonts",
          "depth": 2,
          "numbering": [
            1,
            2
          ],
          "parent": "root"
        },
        {
          "value": "Font Sizes",
          "href": "#font-sizes",
          "depth": 2,
          "numbering": [
            1,
            3
          ],
          "parent": "root"
        },
        {
          "value": "Font Weights",
          "href": "#font-weights",
          "depth": 2,
          "numbering": [
            1,
            4
          ],
          "parent": "root"
        },
        {
          "value": "Letter Spacings",
          "href": "#letter-spacings",
          "depth": 2,
          "numbering": [
            1,
            5
          ],
          "parent": "root"
        },
        {
          "value": "Line Heights",
          "href": "#line-heights",
          "depth": 2,
          "numbering": [
            1,
            6
          ],
          "parent": "root"
        }
      ],
      "icon": "BookType"
    },
    "mdx": "\n# Typography\n\nBelow you'll find the raw tokens to change typography styles on a text-element.\n\n## Text Styles\n\nText styles are collections of multiple typography rules (such as `font-size`,\n`line-height`, `letter-spacing` etc.) that create a specific, reusable style.\n\n> [!NOTE]  \n> I added `caption`, `detail` & `body` from our existing styles, but they are\n> essentially just combinations of font-size & line-height and can be mapped to\n> `xs`, `sm` & `md`. The `headline` looks can be achieved by using the\n> textStyles on the `<Heading/>` component.\n\n```jsx\n<Text textStyle=\"nameOfDesiredTextStyle\">Heading 1</Text>\n```\n\n### Available Text Styles\n\n<TextStylesDemo />\n\n## Fonts\n\n<GenericTokenTableDemo category=\"fonts\" demoProperty=\"fontFamily\" />\n\n## Font Sizes\n\n<GenericTokenTableDemo category=\"fontSizes\" demoProperty=\"fontSize\" />\n\n## Font Weights\n\n<GenericTokenTableDemo category=\"fontWeights\" demoProperty=\"fontWeight\" />\n\n## Letter Spacings\n\n<GenericTokenTableDemo category=\"letterSpacings\" demoProperty=\"letterSpacing\" />\n\n## Line Heights\n\n<GenericTokenTableDemo category=\"lineHeights\" demoProperty=\"lineHeight\" />\n"
  },
  "packages/bleh-ui/src/docs/tokens/z-indices.mdx": {
    "meta": {
      "id": "ZIndex",
      "title": "Z-Indices",
      "description": "The list of available z-index tokens",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/src/docs/tokens/z-indices.mdx",
      "menu": [
        "Tokens",
        "Other",
        "Z-Indices"
      ],
      "route": "tokens/other/z-indices",
      "tags": [
        "z-index",
        "layer",
        "stacking",
        "context"
      ],
      "toc": [],
      "icon": "Layers"
    },
    "mdx": "\n# Z-Indices\n\nThe list of available z-index tokens.\n\n<GenericTokenTableDemo category=\"zIndex\" />\n"
  },
  "packages/bleh-ui/src/docs/transforms.mdx": {
    "meta": {
      "id": "Style Props-Transforms",
      "title": "Transforms",
      "description": "JSX style props for transforming elements.",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/src/docs/transforms.mdx",
      "menu": [
        "Style Props",
        "Transforms"
      ],
      "route": "style-props/transforms",
      "tags": [
        "document"
      ],
      "toc": [
        {
          "value": "Scale",
          "href": "#scale",
          "depth": 2,
          "numbering": [
            1,
            1
          ],
          "parent": "root"
        },
        {
          "value": "Scale X",
          "href": "#scale-x",
          "depth": 2,
          "numbering": [
            1,
            2
          ],
          "parent": "root"
        },
        {
          "value": "Scale Y",
          "href": "#scale-y",
          "depth": 2,
          "numbering": [
            1,
            3
          ],
          "parent": "root"
        },
        {
          "value": "Rotate",
          "href": "#rotate",
          "depth": 2,
          "numbering": [
            1,
            4
          ],
          "parent": "root"
        },
        {
          "value": "Rotate X",
          "href": "#rotate-x",
          "depth": 2,
          "numbering": [
            1,
            5
          ],
          "parent": "root"
        },
        {
          "value": "Rotate Y",
          "href": "#rotate-y",
          "depth": 2,
          "numbering": [
            1,
            6
          ],
          "parent": "root"
        },
        {
          "value": "Translate",
          "href": "#translate",
          "depth": 2,
          "numbering": [
            1,
            7
          ],
          "parent": "root"
        },
        {
          "value": "Translate X",
          "href": "#translate-x",
          "depth": 2,
          "numbering": [
            1,
            8
          ],
          "parent": "root"
        },
        {
          "value": "Translate Y",
          "href": "#translate-y",
          "depth": 2,
          "numbering": [
            1,
            9
          ],
          "parent": "root"
        }
      ]
    },
    "mdx": "\n# Transforms\n\nJSX style props for transforming elements.\n\n## Scale\n\nUse the `scale` prop to control the scale of an element.\n\n```jsx\n<Box scale=\"1.2\" />\n```\n\nWhen the `scale` prop is set to `auto`, the `scaleX` and `scaleY` props are used\nto control the scale of the element.\n\n| Prop    | CSS Property | Token Category |\n| ------- | ------------ | -------------- |\n| `scale` | `scale`      | -              |\n\n## Scale X\n\nUse the `scaleX` prop to control the scaleX property of an element. This\nrequires the `scale` prop to be set to `auto`.\n\n```jsx\n<Box scale=\"auto\" scaleX=\"1.3\" />\n```\n\n| Prop     | CSS Property | Token Category |\n| -------- | ------------ | -------------- |\n| `scaleX` | `--scale-x`  | -              |\n\n## Scale Y\n\nUse the `scaleY` prop to control the scaleY property of an element. This\nrequires the `scale` prop to be set to `auto`.\n\n```jsx\n<Box scale=\"auto\" scaleY=\"0.4\" />\n```\n\n| Prop     | CSS Property | Token Category |\n| -------- | ------------ | -------------- |\n| `scaleY` | `--scale-y`  | -              |\n\n## Rotate\n\nUse the `rotate` prop to control the rotate property of an element.\n\n```jsx\n<Box rotate=\"45deg\" />\n```\n\nWhen the `rotate` prop is set to `auto`, the `rotateX` and `rotateY` props are\nused to control the rotate of the element.\n\n| Prop     | CSS Property | Token Category |\n| -------- | ------------ | -------------- |\n| `rotate` | `rotate`     | -              |\n\n## Rotate X\n\nUse the `rotateX` prop to control the rotateX property of an element.\n\n```jsx\n<Box rotateX=\"45deg\" />\n```\n\n| Prop      | CSS Property | Token Category |\n| --------- | ------------ | -------------- |\n| `rotateX` | `--rotate-x` | -              |\n\n## Rotate Y\n\nUse the `rotateY` prop to control the rotateY property of an element.\n\n```jsx\n<Box rotateY=\"45deg\" />\n```\n\n| Prop      | CSS Property | Token Category |\n| --------- | ------------ | -------------- |\n| `rotateY` | `--rotate-y` | -              |\n\n## Translate\n\nUse the `translate` prop to control the translate property of an element.\n\n```jsx\n<Box translate=\"40px\" />\n<Box translate=\"50% -40%\" />\n```\n\nWhen the `translate` prop is set to `auto`, the `translateX` and `translateY`\nprops are used to control the translate of the element.\n\n| Prop        | CSS Property | Token Category |\n| ----------- | ------------ | -------------- |\n| `translate` | `translate`  | -              |\n\n## Translate X\n\nUse the `translateX` prop to control the translateX property of an element. This\nrequires the `translate` prop to be set to `auto`.\n\n```jsx\n// hardcoded values\n<Box translate=\"auto\" translateX=\"50%\" />\n<Box translate=\"auto\" translateX=\"20px\" />\n\n// token values\n<Box translate=\"auto\" translateX=\"4\" />\n<Box translate=\"auto\" translateX=\"-10\" />\n```\n\n| Prop         | CSS Property    | Token Category |\n| ------------ | --------------- | -------------- |\n| `translateX` | `--translate-x` | `spacing`      |\n\n## Translate Y\n\nUse the `translateY` prop to control the translateY property of an element. This\nrequires the `translate` prop to be set to `auto`.\n\n```jsx\n// hardcoded values\n<Box translate=\"auto\" translateY=\"-40%\" />\n<Box translate=\"auto\" translateY=\"4rem\" />\n\n// token values\n<Box translate=\"auto\" translateY=\"4\" />\n<Box translate=\"auto\" translateY=\"-10\" />\n```\n\n| Prop         | CSS Property    | Token Category |\n| ------------ | --------------- | -------------- |\n| `translateY` | `--translate-y` | `spacing`      |\n"
  },
  "packages/bleh-ui/src/docs/transitions.mdx": {
    "meta": {
      "id": "Style Props-Transitions",
      "title": "Transitions",
      "description": "JSX style props for controlling an element's transition and animation.",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/src/docs/transitions.mdx",
      "menu": [
        "Style Props",
        "Transitions"
      ],
      "route": "style-props/transitions",
      "tags": [
        "document"
      ],
      "toc": [
        {
          "value": "Transition",
          "href": "#transition",
          "depth": 2,
          "numbering": [
            1,
            1
          ],
          "parent": "root"
        },
        {
          "value": "Transition Timing Function",
          "href": "#transition-timing-function",
          "depth": 2,
          "numbering": [
            1,
            2
          ],
          "parent": "root"
        },
        {
          "value": "Transition Duration",
          "href": "#transition-duration",
          "depth": 2,
          "numbering": [
            1,
            3
          ],
          "parent": "root"
        },
        {
          "value": "Transition Delay",
          "href": "#transition-delay",
          "depth": 2,
          "numbering": [
            1,
            4
          ],
          "parent": "root"
        },
        {
          "value": "Animation",
          "href": "#animation",
          "depth": 2,
          "numbering": [
            1,
            5
          ],
          "parent": "root"
        },
        {
          "value": "Animation Name",
          "href": "#animation-name",
          "depth": 2,
          "numbering": [
            1,
            6
          ],
          "parent": "root"
        },
        {
          "value": "Animation Timing Function",
          "href": "#animation-timing-function",
          "depth": 2,
          "numbering": [
            1,
            7
          ],
          "parent": "root"
        },
        {
          "value": "Animation Duration",
          "href": "#animation-duration",
          "depth": 2,
          "numbering": [
            1,
            8
          ],
          "parent": "root"
        },
        {
          "value": "Animation Delay",
          "href": "#animation-delay",
          "depth": 2,
          "numbering": [
            1,
            9
          ],
          "parent": "root"
        }
      ]
    },
    "mdx": "\n# Transitions\n\nJSX style props for controlling an element's transition and animation.\n\n## Transition\n\nUse the `transition` prop to control the transition of an element.\n\n```jsx\n// hardcoded value\n<Box bg=\"red.400\" _hover={{ bg: \"red.500\" }} transition=\"background 0.2s ease-in-out\">\n  Hover me\n</Box>\n\n// shortcut value\n<Box bg=\"red.400\" _hover={{ bg: \"red.500\" }} transition=\"backgrounds\">\n  Hover me\n</Box>\n```\n\n| Prop         | CSS Property | Token Category |\n| ------------ | ------------ | -------------- |\n| `transition` | `transition` | -              |\n\n## Transition Timing Function\n\nUse the `transitionTimingFunction` prop to control the timing function of a\ntransition.\n\n```jsx\n<Box\n  bg=\"red.400\"\n  _hover={{ bg: \"red.500\" }}\n  transition=\"backgrounds\"\n  transitionTimingFunction=\"ease-in-out\"\n>\n  Hover me\n</Box>\n```\n\n| Prop                       | CSS Property                 | Token Category |\n| -------------------------- | ---------------------------- | -------------- |\n| `transitionTimingFunction` | `transition-timing-function` | `easings`      |\n\n## Transition Duration\n\nUse the `transitionDuration` prop to control the duration of a transition.\n\n```jsx\n<Box\n  bg=\"red.400\"\n  _hover={{ bg: \"red.500\" }}\n  transition=\"backgrounds\"\n  transitionDuration=\"fast\"\n>\n  Hover me\n</Box>\n```\n\n| Prop                 | CSS Property          | Token Category |\n| -------------------- | --------------------- | -------------- |\n| `transitionDuration` | `transition-duration` | `durations`    |\n\n## Transition Delay\n\nUse the `transitionDelay` prop to control the delay of a transition.\n\n```jsx\n<Box\n  bg=\"red.400\"\n  _hover={{ bg: \"red.500\" }}\n  transition=\"backgrounds\"\n  transitionDelay=\"fast\"\n>\n  Hover me\n</Box>\n```\n\n| Prop              | CSS Property       | Token Category |\n| ----------------- | ------------------ | -------------- |\n| `transitionDelay` | `transition-delay` | `durations`    |\n\n## Animation\n\nUse the `animation` prop to control the animation of an element.\n\n```jsx\n<Box animation=\"bounce\" />\n```\n\n| Prop        | CSS Property     | Token Category |\n| ----------- | ---------------- | -------------- |\n| `animation` | `animation-name\t` | `animations`   |\n\n## Animation Name\n\nUse the `animationName` prop to control the name of an animation. Compose\nmultiple animation names to create complex animations.\n\n:::info\n\nThe value of the `animation` prop points to a global keyframe animation. Use the\n`theme.keyframes` object to define the animation.\n\n:::\n\n```jsx\n<Box animationName=\"bounce, fade-in\" animationDuration=\"fast\" />\n```\n\n| Prop            | CSS Property     | Token Category |\n| --------------- | ---------------- | -------------- |\n| `animationName` | `animation-name` | `animations`   |\n\n## Animation Timing Function\n\nUse the `animationTimingFunction` prop to control the timing function of an\nanimation.\n\n```jsx\n<Box animation=\"bounce\" animationTimingFunction=\"ease-in-out\" />\n```\n\n| Prop                      | CSS Property                | Token Category |\n| ------------------------- | --------------------------- | -------------- |\n| `animationTimingFunction` | `animation-timing-function` | `easings`      |\n\n## Animation Duration\n\nUse the `animationDuration` prop to control the duration of an animation.\n\n```jsx\n<Box animation=\"bounce\" animationDuration=\"fast\" />\n```\n\n| Prop                | CSS Property         | Token Category |\n| ------------------- | -------------------- | -------------- |\n| `animationDuration` | `animation-duration` | `durations`    |\n\n## Animation Delay\n\nUse the `animationDelay` prop to control the delay of an animation.\n\n```jsx\n<Box animation=\"bounce\" animationDelay=\"fast\" />\n```\n\n| Prop             | CSS Property      | Token Category |\n| ---------------- | ----------------- | -------------- |\n| `animationDelay` | `animation-delay` | `durations`    |\n"
  },
  "packages/bleh-ui/src/docs/typography.mdx": {
    "meta": {
      "id": "Components-Typography",
      "title": "Typography",
      "description": "Components for text styling and formatting.",
      "documentState": "InitialDraft",
      "order": 6,
      "repoPath": "packages/bleh-ui/src/docs/typography.mdx",
      "menu": [
        "Components",
        "Typography"
      ],
      "route": "components/typography",
      "tags": [
        "document"
      ],
      "toc": [],
      "icon": "TypeOutline"
    },
    "mdx": "\n# Typography\n\nComponents for text styling and formatting.\n"
  },
  "packages/bleh-ui/src/docs/utilities.mdx": {
    "meta": {
      "id": "Components-Utilities",
      "title": "Utilities",
      "description": "Low-level or functional components for utility purposes.",
      "documentState": "InitialDraft",
      "order": 8,
      "repoPath": "packages/bleh-ui/src/docs/utilities.mdx",
      "menu": [
        "Components",
        "Utilities"
      ],
      "route": "components/utilities",
      "tags": [
        "document"
      ],
      "toc": [],
      "icon": "Wrench"
    },
    "mdx": "\n# Utilities\n\nLow-level or functional components for utility purposes.\n"
  },
  "packages/bleh-ui/src/hooks/use-copy-to-clipboard/use-copy-to-clipboard.mdx": {
    "meta": {
      "id": "useCopyToClipboard",
      "title": "useCopyToClipboard",
      "description": "copy text to the clipboard",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/src/hooks/use-copy-to-clipboard/use-copy-to-clipboard.mdx",
      "menu": [
        "Hooks",
        "useCopyToClipboard"
      ],
      "route": "hooks/usecopytoclipboard",
      "tags": [
        "clipboard",
        "copy"
      ],
      "toc": [
        {
          "value": "Usage",
          "href": "#usage",
          "depth": 2,
          "numbering": [
            1,
            1
          ],
          "parent": "root"
        },
        {
          "value": "Reference",
          "href": "#reference",
          "depth": 2,
          "numbering": [
            1,
            2
          ],
          "parent": "root"
        }
      ]
    },
    "mdx": "\n# useCopyToClipboard\n\nCopy text to a user's clipboard.\n\n## Usage\n\n```jsx\nconst Demo = () => {\n  const [text, setText] = React.useState(\"\");\n  const [state, copyToClipboard] = useCopyToClipboard();\n\n  return (\n    <div>\n      <input value={text} onChange={(e) => setText(e.target.value)} />\n      <button type=\"button\" onClick={() => copyToClipboard(text)}>\n        copy text\n      </button>\n      {state.error ? (\n        <p>Unable to copy value: {state.error.message}</p>\n      ) : (\n        state.value && <p>Copied {state.value}</p>\n      )}\n    </div>\n  );\n};\n```\n\n## Reference\n\n```js\nconst [{ value, error, noUserInteraction }, copyToClipboard] =\n  useCopyToClipboard();\n```\n\n- `value` &mdash; value that was copied to clipboard, undefined when nothing was\n  copied.\n- `error` &mdash; caught error when trying to copy to clipboard.\n- `noUserInteraction` &mdash; boolean indicating if user interaction was\n  required to copy the value to clipboard to expose full API from underlying\n  [`copy-to-clipboard`](https://github.com/sudodoki/copy-to-clipboard) library.\n"
  },
  "packages/bleh-ui/src/hooks/use-hotkeys/use-hotkeys.mdx": {
    "meta": {
      "id": "useHotkeys",
      "title": "useHotkeys",
      "description": "use keyboard shortcuts to do stuff",
      "documentState": "InitialDraft",
      "order": 999,
      "repoPath": "packages/bleh-ui/src/hooks/use-hotkeys/use-hotkeys.mdx",
      "menu": [
        "Hooks",
        "useHotkeys"
      ],
      "route": "hooks/usehotkeys",
      "tags": [
        "keys",
        "shortcut",
        "keyboard"
      ],
      "toc": [
        {
          "value": "Basic Usage",
          "href": "#basic-usage",
          "depth": 2,
          "numbering": [
            1,
            1
          ],
          "parent": "root"
        },
        {
          "value": "Simple Hotkey",
          "href": "#simple-hotkey",
          "depth": 2,
          "numbering": [
            1,
            2
          ],
          "parent": "root"
        },
        {
          "value": "More stuff",
          "href": "#more-stuff",
          "depth": 2,
          "numbering": [
            1,
            3
          ],
          "parent": "root"
        }
      ]
    },
    "mdx": "\n# useHotkeys\n\nThis hook allows you to listen to hotkeys in a declarative way and execute a\ncallback function once the user pressed down the given hotkey.\n\n## Basic Usage\n\nImport the `useHotkeys` hook from the package:\n\n```js\nimport { useHotkeys } from \"@bleh-ui/react\";\n```\n\n## Simple Hotkey\n\nThe most basic usage for the hook is to assign a hotkey you want to listen to\nand a callback to get executed once the user hits that key.\n\n```jsx-live\nimport { useHotkeys } from \"@bleh-ui/react\";\n\nconst App = () => {\n  useHotkeys(\"a\", () => alert(\"Key a was pressed\"));\n\n  return <span>Press the a key to see it work.</span>;\n};\n```\n\n## More stuff\n\nUse the documentation of the underlying library for now:\n\nhttps://react-hotkeys-hook.vercel.app/docs/intro\n"
  }
}