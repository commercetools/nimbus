---
description: 
globs: *.recipe.tsx
alwaysApply: false
---
# Nimbus Recipe Blueprint

This document serves as a comprehensive guide for creating and maintaining component style recipes in the Nimbus design system. Recipes are the single source of truth for a component's visual appearance, built upon Chakra UI's styling system.

## Overview

A style recipe defines all the style properties for a component, including its base appearance, variants, and interaction states. We use Chakra UI's recipe system, which includes `defineRecipe` for single-part components and `defineSlotRecipe` for multi-part components.

These recipes are consumed within the component files to apply styles. Adhering to the conventions in this document ensures that all components are styled consistently, are themeable, and are easy to maintain.

## File Conventions

- **Location:** Recipe files must be located within their corresponding component's directory: `packages/nimbus/src/components/<component-name>/`.
- **Naming:** The file must be named `<component-name>.recipe.ts`.
- **Export:** The recipe must be a named export, using the component's name (e.g., `export const buttonRecipe = ...`).

## Core Concepts of a Recipe

A recipe object is composed of several key properties that define the component's styling.

### 1. `className`
Provides a unique, kebab-case class name for the component, prefixed with `nimbus-`. This is used for easy identification in the DOM and for potential global overrides or testing.

```typescript
className: "nimbus-button",
```

### 2. `base`
The `base` object contains all the foundational styles that apply to a component, regardless of its variant. For multi-part components, the `base` object contains nested objects for each slot.

```typescript
// Single-part component
base: {
  display: "inline-flex",
  alignItems: "center",
  justifyContent: "center",
  borderRadius: "200",
  // ... other base styles
},

// Multi-part component
base: {
  root: {
    display: "flex",
    width: "100%",
  },
  title: {
    fontWeight: "bold",
  },
}
```

### 3. `variants`
The `variants` object defines the different visual variations of a component. Common variant categories include:
- **`size`**: Controls dimensions, padding, and font sizes (`sm`, `md`, `lg`).
- **`variant`**: Defines the main visual style (`solid`, `outline`, `ghost`).
- **`tone`**: Applies semantic color schemes (`primary`, `critical`, `neutral`).
- **`orientation`**: Controls layout (`horizontal`, `vertical`).

```typescript
variants: {
  size: {
    md: { h: "1000", px: "400" },
    lg: { h: "1200", px: "500" },
  },
  variant: {
    solid: { bg: "colorPalette.9", color: "colorPalette.contrast" },
    outline: { borderWidth: "1px", borderColor: "colorPalette.7" },
  }
}
```

### 4. `defaultVariants`
This object specifies the default variants that should be applied to the component if no variants are explicitly passed as props. This ensures a consistent, default appearance.

```typescript
defaultVariants: {
  size: "md",
  variant: "solid",
  tone: "neutral",
}
```

## Creating Recipes

### Single-Part Components (`defineRecipe`)
For components that consist of a single interactive or display element (e.g., `Button`, `Badge`, `Code`).

```typescript
import { defineRecipe } from "@chakra-ui/react";

export const buttonRecipe = defineRecipe({
  className: "nimbus-button",
  base: {
    display: "inline-flex",
    alignItems: "center",
    borderRadius: "200",
    _disabled: {
      layerStyle: "disabled",
    },
  },
  variants: {
    // ... variant definitions
  },
  defaultVariants: {
    size: "md",
    variant: "subtle",
  },
});
```
**Examples:** `Button`, `Badge`, `Icon`, `Code`, `Heading`, `Link`.

### Multi-Part Components (`defineSlotRecipe`)
For components composed of multiple distinct parts (e.g., `Alert`, `Card`, `Select`).

- **`slots`**: First, define all the component parts in a `slots` array.
- **`base`**: Apply base styles to each slot.
- **`variants`**: Variants can apply styles to any of the defined slots.

```typescript
import { defineSlotRecipe } from "@chakra-ui/react";

export const alertRecipe = defineSlotRecipe({
  slots: ["root", "title", "description", "icon"],
  className: "nimbus-alert",
  base: {
    root: {
      display: "inline-flex",
      gap: "200",
    },
    icon: {
      "& svg": {
        width: "500",
        height: "500",
      },
    },
    title: {
      // Base title styles
    },
  },
  variants: {
    // ... variant definitions affecting multiple slots
  },
  defaultVariants: {
    variant: "flat",
    tone: "info",
  },
});
```
**Examples:** `Menu`, `Select`, `Card`, `Alert`, `FormField`, `Switch`.

## Best Practices

### Use Design Tokens
Always use design tokens for styling properties. This ensures consistency with the Nimbus design system and allows for effective theming.
- **Spacing:** `p`, `m`, `gap` (e.g., `"200"`, `"400"`)
- **Sizing:** `h`, `w`, `minW` (e.g., `"800"`, `"1000"`)
- **Colors:** `bg`, `color`, `borderColor` (e.g., `"primary.9"`, `"neutral.11"`)
- **Typography:** `fontSize`, `fontWeight`, `lineHeight` (e.g., `"400"`, `"500"`)
- **Borders:** `borderRadius`, `borderWidth` (e.g., `"200"`, `"1px"`)

### Use Chakra UI Style Props
Prefer Chakra UI's style props over raw CSS properties or shorthands.

**✅ Preferred:**
```typescript
base: {
  paddingX: "400",
  backgroundColor: "colorPalette.9",
  borderRadius: "300",
}
```

**❌ Avoid:**
```typescript
base: {
  padding: "0 var(--spacing-400)", // Hard to maintain
  "background-color": "#FFFFFF",   // Bypasses theme
  "border-radius": "6px",          // Bypasses theme
}
```

### Handle Interaction States
Use pseudo-props to define styles for different interaction states.
- `_hover`
- `_active`
- `_focus`, `_focusVisible` (for accessibility)
- `_disabled`
- `_invalid` (for form fields)
- `_expanded` (for menus, accordions)
- `_checked` (for checkboxes, radios)
- `data-[state]` selectors for more complex state management. 